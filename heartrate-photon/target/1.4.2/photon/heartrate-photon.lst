
/Users/mike/Documents/proton-projects/app-engine-mk2/heartrate-photon/target/1.4.2/photon/heartrate-photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003104  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3120  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a3124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000634  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3190  080a3190  00023190  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a31b8  080a31b8  000231b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b2380  00000000  00000000  000231bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010305  00000000  00000000  000d553c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013d3f  00000000  00000000  000e5841  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001fc0  00000000  00000000  000f9580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003188  00000000  00000000  000fb540  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026a3e  00000000  00000000  000fe6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025e06  00000000  00000000  00125106  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a918f  00000000  00000000  0014af0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b93c  00000000  00000000  001f409c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe2b 	bl	80a2c88 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe30 	bl	80a2c9e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3124 	.word	0x080a3124
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200006a0 	.word	0x200006a0
 80a0058:	200006a0 	.word	0x200006a0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fe97 	bl	80a1d90 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a30d8 	.word	0x080a30d8
 80a0084:	080a3118 	.word	0x080a3118

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f855 	bl	80a013c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 be3d 	b.w	80a1d14 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bdd1 	b.w	80a0c40 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bdd7 	b.w	80a0c50 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:

float beatsPerMinute;
int beatAvg;

void setup()
{
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200);
 80a00b6:	f001 fd39 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a00ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00be:	f001 fd1b 	bl	80a1af8 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
 80a00c2:	f001 fd33 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a00c6:	4918      	ldr	r1, [pc, #96]	; (80a0128 <setup+0x74>)
 80a00c8:	f001 fa6b 	bl	80a15a2 <_ZN5Print7printlnEPKc>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a00cc:	f001 fe8c 	bl	80a1de8 <_Z19__fetch_global_Wirev>
 80a00d0:	2357      	movs	r3, #87	; 0x57
 80a00d2:	4601      	mov	r1, r0
 80a00d4:	4a15      	ldr	r2, [pc, #84]	; (80a012c <setup+0x78>)
 80a00d6:	4816      	ldr	r0, [pc, #88]	; (80a0130 <setup+0x7c>)
 80a00d8:	f000 fa04 	bl	80a04e4 <_ZN8MAX301055beginER7TwoWiremh>
 80a00dc:	b928      	cbnz	r0, 80a00ea <setup+0x36>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
 80a00de:	f001 fd25 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a00e2:	4914      	ldr	r1, [pc, #80]	; (80a0134 <setup+0x80>)
 80a00e4:	f001 fa5d 	bl	80a15a2 <_ZN5Print7printlnEPKc>
 80a00e8:	e7fe      	b.n	80a00e8 <setup+0x34>
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
 80a00ea:	f001 fd1f 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a00ee:	4912      	ldr	r1, [pc, #72]	; (80a0138 <setup+0x84>)
 80a00f0:	f001 fa57 	bl	80a15a2 <_ZN5Print7printlnEPKc>

  particleSensor.setup(); //Configure sensor with default settings
 80a00f4:	f240 129b 	movw	r2, #411	; 0x19b
 80a00f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a00fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0100:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a0104:	480a      	ldr	r0, [pc, #40]	; (80a0130 <setup+0x7c>)
 80a0106:	2303      	movs	r3, #3
 80a0108:	2204      	movs	r2, #4
 80a010a:	211f      	movs	r1, #31
 80a010c:	f000 faa9 	bl	80a0662 <_ZN8MAX301055setupEhhhiii>
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
 80a0110:	210a      	movs	r1, #10
 80a0112:	4807      	ldr	r0, [pc, #28]	; (80a0130 <setup+0x7c>)
 80a0114:	f000 fa15 	bl	80a0542 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
 80a0118:	4805      	ldr	r0, [pc, #20]	; (80a0130 <setup+0x7c>)
 80a011a:	2100      	movs	r1, #0
}
 80a011c:	b005      	add	sp, #20
 80a011e:	f85d eb04 	ldr.w	lr, [sp], #4
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
 80a0122:	f000 ba18 	b.w	80a0556 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
 80a0126:	bf00      	nop
 80a0128:	080a2d5c 	.word	0x080a2d5c
 80a012c:	00061a80 	.word	0x00061a80
 80a0130:	20000078 	.word	0x20000078
 80a0134:	080a2d6c 	.word	0x080a2d6c
 80a0138:	080a2da0 	.word	0x080a2da0

080a013c <loop>:
}

void loop()
{
 80a013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  long irValue = particleSensor.getIR();
 80a0140:	4854      	ldr	r0, [pc, #336]	; (80a0294 <loop+0x158>)
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
}

void loop()
{
 80a0142:	b088      	sub	sp, #32
  long irValue = particleSensor.getIR();
 80a0144:	f000 f9b6 	bl	80a04b4 <_ZN8MAX301055getIREv>
 80a0148:	4606      	mov	r6, r0

  if (checkForBeat(irValue) == true)
 80a014a:	f000 fb77 	bl	80a083c <_Z12checkForBeatl>
 80a014e:	4f52      	ldr	r7, [pc, #328]	; (80a0298 <loop+0x15c>)
 80a0150:	4d52      	ldr	r5, [pc, #328]	; (80a029c <loop+0x160>)
 80a0152:	2800      	cmp	r0, #0
 80a0154:	d065      	beq.n	80a0222 <loop+0xe6>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0156:	f000 fbed 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
 80a015a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80a02cc <loop+0x190>
 80a015e:	f8d8 3000 	ldr.w	r3, [r8]
 80a0162:	1ac4      	subs	r4, r0, r3
 80a0164:	f000 fbe6 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>
    lastBeat = millis();
 80a0168:	f8c8 0000 	str.w	r0, [r8]

    beatsPerMinute = 60 / (delta / 1000.0);
 80a016c:	4620      	mov	r0, r4
 80a016e:	f002 f939 	bl	80a23e4 <__aeabi_i2d>
 80a0172:	2200      	movs	r2, #0
 80a0174:	4b4a      	ldr	r3, [pc, #296]	; (80a02a0 <loop+0x164>)
 80a0176:	f002 fac5 	bl	80a2704 <__aeabi_ddiv>
 80a017a:	4602      	mov	r2, r0
 80a017c:	460b      	mov	r3, r1
 80a017e:	2000      	movs	r0, #0
 80a0180:	4948      	ldr	r1, [pc, #288]	; (80a02a4 <loop+0x168>)
 80a0182:	f002 fabf 	bl	80a2704 <__aeabi_ddiv>
 80a0186:	f002 fc8b 	bl	80a2aa0 <__aeabi_d2f>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80a018a:	4947      	ldr	r1, [pc, #284]	; (80a02a8 <loop+0x16c>)
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);
 80a018c:	6038      	str	r0, [r7, #0]
 80a018e:	4681      	mov	r9, r0

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80a0190:	f002 fd24 	bl	80a2bdc <__aeabi_fcmplt>
 80a0194:	b308      	cbz	r0, 80a01da <loop+0x9e>
 80a0196:	4945      	ldr	r1, [pc, #276]	; (80a02ac <loop+0x170>)
 80a0198:	4648      	mov	r0, r9
 80a019a:	f002 fd3d 	bl	80a2c18 <__aeabi_fcmpgt>
 80a019e:	b1e0      	cbz	r0, 80a01da <loop+0x9e>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
 80a01a0:	4648      	mov	r0, r9
 80a01a2:	f002 fd43 	bl	80a2c2c <__aeabi_f2uiz>
 80a01a6:	f8df a128 	ldr.w	sl, [pc, #296]	; 80a02d0 <loop+0x194>
 80a01aa:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80a02d4 <loop+0x198>
 80a01ae:	f89a 4000 	ldrb.w	r4, [sl]
 80a01b2:	f808 0004 	strb.w	r0, [r8, r4]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01b6:	f898 2000 	ldrb.w	r2, [r8]
 80a01ba:	f898 3001 	ldrb.w	r3, [r8, #1]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01be:	3401      	adds	r4, #1

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01c0:	4413      	add	r3, r2
 80a01c2:	f898 2002 	ldrb.w	r2, [r8, #2]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01c6:	f004 0403 	and.w	r4, r4, #3

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01ca:	4413      	add	r3, r2
 80a01cc:	f898 2003 	ldrb.w	r2, [r8, #3]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01d0:	f88a 4000 	strb.w	r4, [sl]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01d4:	4413      	add	r3, r2
 80a01d6:	109b      	asrs	r3, r3, #2
 80a01d8:	602b      	str	r3, [r5, #0]
    }
    //https://community.particle.io/t/string-format-help/16309
    Particle.publish("wubbalubbadubdub", String::format("%d", beatAvg), PRIVATE); 
 80a01da:	682a      	ldr	r2, [r5, #0]
 80a01dc:	4934      	ldr	r1, [pc, #208]	; (80a02b0 <loop+0x174>)
 80a01de:	a804      	add	r0, sp, #16
 80a01e0:	f001 fb78 	bl	80a18d4 <_ZN6String6formatEPKcz>
 80a01e4:	4b33      	ldr	r3, [pc, #204]	; (80a02b4 <loop+0x178>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a01e6:	9a04      	ldr	r2, [sp, #16]
 80a01e8:	781b      	ldrb	r3, [r3, #0]
 80a01ea:	4933      	ldr	r1, [pc, #204]	; (80a02b8 <loop+0x17c>)
 80a01ec:	f88d 3000 	strb.w	r3, [sp]
 80a01f0:	a802      	add	r0, sp, #8
 80a01f2:	233c      	movs	r3, #60	; 0x3c
 80a01f4:	f000 fee2 	bl	80a0fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a01f8:	9c03      	ldr	r4, [sp, #12]
 80a01fa:	b17c      	cbz	r4, 80a021c <loop+0xe0>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a01fc:	6863      	ldr	r3, [r4, #4]
 80a01fe:	3b01      	subs	r3, #1
 80a0200:	6063      	str	r3, [r4, #4]
 80a0202:	b95b      	cbnz	r3, 80a021c <loop+0xe0>
        {
          _M_dispose();
 80a0204:	6823      	ldr	r3, [r4, #0]
 80a0206:	4620      	mov	r0, r4
 80a0208:	689b      	ldr	r3, [r3, #8]
 80a020a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a020c:	68a3      	ldr	r3, [r4, #8]
 80a020e:	3b01      	subs	r3, #1
 80a0210:	60a3      	str	r3, [r4, #8]
 80a0212:	b91b      	cbnz	r3, 80a021c <loop+0xe0>
            _M_destroy();
 80a0214:	6823      	ldr	r3, [r4, #0]
 80a0216:	4620      	mov	r0, r4
 80a0218:	68db      	ldr	r3, [r3, #12]
 80a021a:	4798      	blx	r3
 80a021c:	a804      	add	r0, sp, #16
 80a021e:	f001 faff 	bl	80a1820 <_ZN6StringD1Ev>
  }

  Serial.print("IR=");
 80a0222:	f001 fc83 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a0226:	4925      	ldr	r1, [pc, #148]	; (80a02bc <loop+0x180>)
 80a0228:	f001 f9a8 	bl	80a157c <_ZN5Print5printEPKc>
  Serial.print(irValue);
 80a022c:	f001 fc7e 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a0230:	220a      	movs	r2, #10
 80a0232:	4631      	mov	r1, r6
 80a0234:	f001 f9eb 	bl	80a160e <_ZN5Print5printEli>
  Serial.print(", BPM=");
 80a0238:	f001 fc78 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a023c:	4920      	ldr	r1, [pc, #128]	; (80a02c0 <loop+0x184>)
 80a023e:	f001 f99d 	bl	80a157c <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
 80a0242:	f001 fc73 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a0246:	4604      	mov	r4, r0
 80a0248:	6838      	ldr	r0, [r7, #0]
 80a024a:	f002 f8dd 	bl	80a2408 <__aeabi_f2d>
 80a024e:	2302      	movs	r3, #2
 80a0250:	4602      	mov	r2, r0
 80a0252:	9300      	str	r3, [sp, #0]
 80a0254:	4620      	mov	r0, r4
 80a0256:	460b      	mov	r3, r1
 80a0258:	f001 faac 	bl	80a17b4 <_ZN5Print5printEdi>
  Serial.print(", Avg BPM=");
 80a025c:	f001 fc66 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a0260:	4918      	ldr	r1, [pc, #96]	; (80a02c4 <loop+0x188>)
 80a0262:	f001 f98b 	bl	80a157c <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
 80a0266:	f001 fc61 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a026a:	220a      	movs	r2, #10
 80a026c:	6829      	ldr	r1, [r5, #0]
 80a026e:	f001 f9f0 	bl	80a1652 <_ZN5Print5printEii>

  if (irValue < 50000)
 80a0272:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a0276:	429e      	cmp	r6, r3
 80a0278:	dc04      	bgt.n	80a0284 <loop+0x148>
    Serial.print(" No finger?");
 80a027a:	f001 fc57 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a027e:	4912      	ldr	r1, [pc, #72]	; (80a02c8 <loop+0x18c>)
 80a0280:	f001 f97c 	bl	80a157c <_ZN5Print5printEPKc>

  Serial.println();
 80a0284:	f001 fc52 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a0288:	f001 f97f 	bl	80a158a <_ZN5Print7printlnEv>
}
 80a028c:	b008      	add	sp, #32
 80a028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0292:	bf00      	nop
 80a0294:	20000078 	.word	0x20000078
 80a0298:	200000bc 	.word	0x200000bc
 80a029c:	20000070 	.word	0x20000070
 80a02a0:	408f4000 	.word	0x408f4000
 80a02a4:	404e0000 	.word	0x404e0000
 80a02a8:	437f0000 	.word	0x437f0000
 80a02ac:	41a00000 	.word	0x41a00000
 80a02b0:	080a2ddc 	.word	0x080a2ddc
 80a02b4:	20000074 	.word	0x20000074
 80a02b8:	080a2ddf 	.word	0x080a2ddf
 80a02bc:	080a2df0 	.word	0x080a2df0
 80a02c0:	080a2df4 	.word	0x080a2df4
 80a02c4:	080a2dfb 	.word	0x080a2dfb
 80a02c8:	080a2e06 	.word	0x080a2e06
 80a02cc:	200000b4 	.word	0x200000b4
 80a02d0:	200000c0 	.word	0x200000c0
 80a02d4:	200000b8 	.word	0x200000b8

080a02d8 <_GLOBAL__sub_I_particleSensor>:
 80a02d8:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a02da:	4b05      	ldr	r3, [pc, #20]	; (80a02f0 <_GLOBAL__sub_I_particleSensor+0x18>)
 80a02dc:	2201      	movs	r2, #1
 80a02de:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02e0:	f000 fb30 	bl	80a0944 <HAL_Pin_Map>
 80a02e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
 80a02e8:	4802      	ldr	r0, [pc, #8]	; (80a02f4 <_GLOBAL__sub_I_particleSensor+0x1c>)
 80a02ea:	f000 b805 	b.w	80a02f8 <_ZN8MAX30105C1Ev>
 80a02ee:	bf00      	nop
 80a02f0:	20000074 	.word	0x20000074
 80a02f4:	20000078 	.word	0x20000078

080a02f8 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a02f8:	4770      	bx	lr

080a02fa <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a02fa:	b570      	push	{r4, r5, r6, lr}
 80a02fc:	4604      	mov	r4, r0
 80a02fe:	4616      	mov	r6, r2
 80a0300:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a0302:	6800      	ldr	r0, [r0, #0]
 80a0304:	f001 f835 	bl	80a1372 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0308:	6820      	ldr	r0, [r4, #0]
 80a030a:	4631      	mov	r1, r6
 80a030c:	6803      	ldr	r3, [r0, #0]
 80a030e:	689b      	ldr	r3, [r3, #8]
 80a0310:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a0312:	2100      	movs	r1, #0
 80a0314:	6820      	ldr	r0, [r4, #0]
 80a0316:	f001 f833 	bl	80a1380 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a031a:	2201      	movs	r2, #1
 80a031c:	4629      	mov	r1, r5
 80a031e:	6820      	ldr	r0, [r4, #0]
 80a0320:	f001 f81f 	bl	80a1362 <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
 80a0324:	6820      	ldr	r0, [r4, #0]
 80a0326:	6803      	ldr	r3, [r0, #0]
 80a0328:	691b      	ldr	r3, [r3, #16]
 80a032a:	4798      	blx	r3
 80a032c:	b120      	cbz	r0, 80a0338 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a032e:	6820      	ldr	r0, [r4, #0]
 80a0330:	6803      	ldr	r3, [r0, #0]
 80a0332:	695b      	ldr	r3, [r3, #20]
 80a0334:	4798      	blx	r3
 80a0336:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a0338:	bd70      	pop	{r4, r5, r6, pc}

080a033a <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a033a:	2204      	movs	r2, #4
 80a033c:	7901      	ldrb	r1, [r0, #4]
 80a033e:	f7ff bfdc 	b.w	80a02fa <_ZN8MAX3010513readRegister8Ehh>

080a0342 <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a0342:	2206      	movs	r2, #6
 80a0344:	7901      	ldrb	r1, [r0, #4]
 80a0346:	f7ff bfd8 	b.w	80a02fa <_ZN8MAX3010513readRegister8Ehh>

080a034a <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
 80a034a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a034e:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
 80a0350:	f7ff fff7 	bl	80a0342 <_ZN8MAX3010514getReadPointerEv>
 80a0354:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
 80a0356:	4620      	mov	r0, r4
 80a0358:	f7ff ffef 	bl	80a033a <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
 80a035c:	4285      	cmp	r5, r0
 80a035e:	f000 808e 	beq.w	80a047e <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a0362:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a0364:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a0368:	6820      	ldr	r0, [r4, #0]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a036a:	bf48      	it	mi
 80a036c:	3720      	addmi	r7, #32

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a036e:	7966      	ldrb	r6, [r4, #5]

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a0370:	f001 f803 	bl	80a137a <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a0374:	6820      	ldr	r0, [r4, #0]
 80a0376:	2107      	movs	r1, #7
 80a0378:	6803      	ldr	r3, [r0, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a037a:	437e      	muls	r6, r7

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
    _i2cPort->write(MAX30105_FIFODATA);
 80a037c:	689b      	ldr	r3, [r3, #8]
 80a037e:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a0380:	6820      	ldr	r0, [r4, #0]
 80a0382:	f001 f801 	bl	80a1388 <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a0386:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a038a:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80a038e:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
 80a0392:	2e00      	cmp	r6, #0
 80a0394:	dd74      	ble.n	80a0480 <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
 80a0396:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a0398:	bfc9      	itett	gt
 80a039a:	7965      	ldrbgt	r5, [r4, #5]
 80a039c:	4635      	movle	r5, r6
 80a039e:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a03a2:	fb98 f3f5 	sdivgt	r3, r8, r5
 80a03a6:	bfc8      	it	gt
 80a03a8:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a03aa:	2157      	movs	r1, #87	; 0x57
 80a03ac:	462a      	mov	r2, r5
 80a03ae:	6820      	ldr	r0, [r4, #0]
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
 80a03b0:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a03b2:	f000 ffd9 	bl	80a1368 <_ZN7TwoWire11requestFromEii>
      
      while (toGet > 0)
 80a03b6:	2d00      	cmp	r5, #0
 80a03b8:	ddeb      	ble.n	80a0392 <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a03ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
 80a03be:	6820      	ldr	r0, [r4, #0]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a03c0:	3301      	adds	r3, #1
 80a03c2:	f003 0303 	and.w	r3, r3, #3
 80a03c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
 80a03ca:	6803      	ldr	r3, [r0, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80a03cc:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a03d0:	695b      	ldr	r3, [r3, #20]
 80a03d2:	4798      	blx	r3
 80a03d4:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a03d8:	6820      	ldr	r0, [r4, #0]
 80a03da:	6803      	ldr	r3, [r0, #0]
 80a03dc:	695b      	ldr	r3, [r3, #20]
 80a03de:	4798      	blx	r3
 80a03e0:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a03e4:	6820      	ldr	r0, [r4, #0]
 80a03e6:	6803      	ldr	r3, [r0, #0]
 80a03e8:	695b      	ldr	r3, [r3, #20]
 80a03ea:	4798      	blx	r3
 80a03ec:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a03f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a03f4:	9a01      	ldr	r2, [sp, #4]
 80a03f6:	3302      	adds	r3, #2
 80a03f8:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a03fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
 80a0400:	7963      	ldrb	r3, [r4, #5]
 80a0402:	2b01      	cmp	r3, #1
 80a0404:	d919      	bls.n	80a043a <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
 80a0406:	6820      	ldr	r0, [r4, #0]
 80a0408:	6803      	ldr	r3, [r0, #0]
 80a040a:	695b      	ldr	r3, [r3, #20]
 80a040c:	4798      	blx	r3
 80a040e:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0412:	6820      	ldr	r0, [r4, #0]
 80a0414:	6803      	ldr	r3, [r0, #0]
 80a0416:	695b      	ldr	r3, [r3, #20]
 80a0418:	4798      	blx	r3
 80a041a:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a041e:	6820      	ldr	r0, [r4, #0]
 80a0420:	6803      	ldr	r3, [r0, #0]
 80a0422:	695b      	ldr	r3, [r3, #20]
 80a0424:	4798      	blx	r3
 80a0426:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
 80a042a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a042e:	9a01      	ldr	r2, [sp, #4]
 80a0430:	3306      	adds	r3, #6
 80a0432:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a0436:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
 80a043a:	7963      	ldrb	r3, [r4, #5]
 80a043c:	2b02      	cmp	r3, #2
 80a043e:	d919      	bls.n	80a0474 <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
 80a0440:	6820      	ldr	r0, [r4, #0]
 80a0442:	6803      	ldr	r3, [r0, #0]
 80a0444:	695b      	ldr	r3, [r3, #20]
 80a0446:	4798      	blx	r3
 80a0448:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a044c:	6820      	ldr	r0, [r4, #0]
 80a044e:	6803      	ldr	r3, [r0, #0]
 80a0450:	695b      	ldr	r3, [r3, #20]
 80a0452:	4798      	blx	r3
 80a0454:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a0458:	6820      	ldr	r0, [r4, #0]
 80a045a:	6803      	ldr	r3, [r0, #0]
 80a045c:	695b      	ldr	r3, [r3, #20]
 80a045e:	4798      	blx	r3
 80a0460:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
 80a0464:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0468:	9a01      	ldr	r2, [sp, #4]
 80a046a:	330a      	adds	r3, #10
 80a046c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a0470:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
 80a0474:	7963      	ldrb	r3, [r4, #5]
 80a0476:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a047a:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
 80a047c:	e79b      	b.n	80a03b6 <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
 80a047e:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
 80a0480:	b2b8      	uxth	r0, r7
 80a0482:	b003      	add	sp, #12
 80a0484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0488 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
 80a0488:	b570      	push	{r4, r5, r6, lr}
 80a048a:	4605      	mov	r5, r0
 80a048c:	460e      	mov	r6, r1
 80a048e:	f000 fa51 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>
 80a0492:	4604      	mov	r4, r0
 80a0494:	f000 fa4e 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a0498:	1b00      	subs	r0, r0, r4
 80a049a:	42b0      	cmp	r0, r6
 80a049c:	d808      	bhi.n	80a04b0 <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
 80a049e:	4628      	mov	r0, r5
 80a04a0:	f7ff ff53 	bl	80a034a <_ZN8MAX301055checkEv>
 80a04a4:	2801      	cmp	r0, #1
 80a04a6:	d004      	beq.n	80a04b2 <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
 80a04a8:	2001      	movs	r0, #1
 80a04aa:	f000 fbf9 	bl	80a0ca0 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
 80a04ae:	e7f1      	b.n	80a0494 <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a04b0:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
 80a04b2:	bd70      	pop	{r4, r5, r6, pc}

080a04b4 <_ZN8MAX301055getIREv>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 80a04b4:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80a04b6:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 80a04b8:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80a04ba:	f7ff ffe5 	bl	80a0488 <_ZN8MAX301059safeCheckEh>
 80a04be:	b120      	cbz	r0, 80a04ca <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a04c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a04c4:	3306      	adds	r3, #6
 80a04c6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
 80a04ca:	bd10      	pop	{r4, pc}

080a04cc <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a04cc:	22ff      	movs	r2, #255	; 0xff
 80a04ce:	7901      	ldrb	r1, [r0, #4]
 80a04d0:	f7ff bf13 	b.w	80a02fa <_ZN8MAX3010513readRegister8Ehh>

080a04d4 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
 80a04d4:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a04d6:	22fe      	movs	r2, #254	; 0xfe
 80a04d8:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
 80a04da:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a04dc:	f7ff ff0d 	bl	80a02fa <_ZN8MAX3010513readRegister8Ehh>
 80a04e0:	71a0      	strb	r0, [r4, #6]
 80a04e2:	bd10      	pop	{r4, pc}

080a04e4 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a04e4:	b570      	push	{r4, r5, r6, lr}
 80a04e6:	4604      	mov	r4, r0
 80a04e8:	4616      	mov	r6, r2
 80a04ea:	461d      	mov	r5, r3
 80a04ec:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a04ee:	6021      	str	r1, [r4, #0]

  _i2cPort->begin();
 80a04f0:	f000 ff28 	bl	80a1344 <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a04f4:	4631      	mov	r1, r6
 80a04f6:	6820      	ldr	r0, [r4, #0]
 80a04f8:	f000 ff20 	bl	80a133c <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
 80a04fc:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a04fe:	4620      	mov	r0, r4
 80a0500:	f7ff ffe4 	bl	80a04cc <_ZN8MAX3010510readPartIDEv>
 80a0504:	2815      	cmp	r0, #21
 80a0506:	d104      	bne.n	80a0512 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
 80a0508:	4620      	mov	r0, r4
 80a050a:	f7ff ffe3 	bl	80a04d4 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
 80a050e:	2001      	movs	r0, #1
 80a0510:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
 80a0512:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
 80a0514:	bd70      	pop	{r4, r5, r6, pc}

080a0516 <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a0516:	b570      	push	{r4, r5, r6, lr}
 80a0518:	4604      	mov	r4, r0
 80a051a:	4616      	mov	r6, r2
 80a051c:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a051e:	6800      	ldr	r0, [r0, #0]
 80a0520:	f000 ff27 	bl	80a1372 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0524:	6820      	ldr	r0, [r4, #0]
 80a0526:	4631      	mov	r1, r6
 80a0528:	6803      	ldr	r3, [r0, #0]
 80a052a:	689b      	ldr	r3, [r3, #8]
 80a052c:	4798      	blx	r3
  _i2cPort->write(value);
 80a052e:	6820      	ldr	r0, [r4, #0]
 80a0530:	4629      	mov	r1, r5
 80a0532:	6803      	ldr	r3, [r0, #0]
 80a0534:	689a      	ldr	r2, [r3, #8]
 80a0536:	4790      	blx	r2
  _i2cPort->endTransmission();
 80a0538:	6820      	ldr	r0, [r4, #0]
}
 80a053a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
 80a053e:	f000 bf23 	b.w	80a1388 <_ZN7TwoWire15endTransmissionEv>

080a0542 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a0542:	460b      	mov	r3, r1
 80a0544:	220c      	movs	r2, #12
 80a0546:	7901      	ldrb	r1, [r0, #4]
 80a0548:	f7ff bfe5 	b.w	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>

080a054c <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a054c:	460b      	mov	r3, r1
 80a054e:	220d      	movs	r2, #13
 80a0550:	7901      	ldrb	r1, [r0, #4]
 80a0552:	f7ff bfe0 	b.w	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>

080a0556 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a0556:	460b      	mov	r3, r1
 80a0558:	220e      	movs	r2, #14
 80a055a:	7901      	ldrb	r1, [r0, #4]
 80a055c:	f7ff bfdb 	b.w	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>

080a0560 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a0560:	460b      	mov	r3, r1
 80a0562:	2210      	movs	r2, #16
 80a0564:	7901      	ldrb	r1, [r0, #4]
 80a0566:	f7ff bfd6 	b.w	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>

080a056a <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
 80a056a:	b510      	push	{r4, lr}
 80a056c:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a056e:	7901      	ldrb	r1, [r0, #4]
 80a0570:	2300      	movs	r3, #0
 80a0572:	2204      	movs	r2, #4
 80a0574:	f7ff ffcf 	bl	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a0578:	7921      	ldrb	r1, [r4, #4]
 80a057a:	4620      	mov	r0, r4
 80a057c:	2300      	movs	r3, #0
 80a057e:	2205      	movs	r2, #5
 80a0580:	f7ff ffc9 	bl	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a0584:	7921      	ldrb	r1, [r4, #4]
 80a0586:	4620      	mov	r0, r4
}
 80a0588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a058c:	2300      	movs	r3, #0
 80a058e:	2206      	movs	r2, #6
 80a0590:	f7ff bfc1 	b.w	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>

080a0594 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80a0594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0598:	460e      	mov	r6, r1
 80a059a:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a059c:	460a      	mov	r2, r1
 80a059e:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80a05a0:	4604      	mov	r4, r0
 80a05a2:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a05a4:	f7ff fea9 	bl	80a02fa <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a05a8:	4028      	ands	r0, r5
 80a05aa:	ea47 0300 	orr.w	r3, r7, r0
 80a05ae:	4632      	mov	r2, r6
 80a05b0:	7921      	ldrb	r1, [r4, #4]
 80a05b2:	4620      	mov	r0, r4
}
 80a05b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a05b8:	f7ff bfad 	b.w	80a0516 <_ZN8MAX3010514writeRegister8Ehhh>

080a05bc <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 80a05bc:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a05be:	22bf      	movs	r2, #191	; 0xbf
 80a05c0:	2340      	movs	r3, #64	; 0x40
 80a05c2:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 80a05c4:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a05c6:	f7ff ffe5 	bl	80a0594 <_ZN8MAX301057bitMaskEhhh>
 80a05ca:	f000 f9b3 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>
 80a05ce:	4605      	mov	r5, r0
 80a05d0:	f000 f9b0 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
 80a05d4:	1b40      	subs	r0, r0, r5
 80a05d6:	2863      	cmp	r0, #99	; 0x63
 80a05d8:	d80a      	bhi.n	80a05f0 <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a05da:	2209      	movs	r2, #9
 80a05dc:	7921      	ldrb	r1, [r4, #4]
 80a05de:	4620      	mov	r0, r4
 80a05e0:	f7ff fe8b 	bl	80a02fa <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a05e4:	0643      	lsls	r3, r0, #25
 80a05e6:	d503      	bpl.n	80a05f0 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a05e8:	2001      	movs	r0, #1
 80a05ea:	f000 fb59 	bl	80a0ca0 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
 80a05ee:	e7ef      	b.n	80a05d0 <_ZN8MAX301059softResetEv+0x14>
 80a05f0:	bd38      	pop	{r3, r4, r5, pc}

080a05f2 <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a05f2:	460b      	mov	r3, r1
 80a05f4:	22f8      	movs	r2, #248	; 0xf8
 80a05f6:	2109      	movs	r1, #9
 80a05f8:	f7ff bfcc 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>

080a05fc <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a05fc:	460b      	mov	r3, r1
 80a05fe:	229f      	movs	r2, #159	; 0x9f
 80a0600:	210a      	movs	r1, #10
 80a0602:	f7ff bfc7 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>

080a0606 <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a0606:	460b      	mov	r3, r1
 80a0608:	22e3      	movs	r2, #227	; 0xe3
 80a060a:	210a      	movs	r1, #10
 80a060c:	f7ff bfc2 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>

080a0610 <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a0610:	460b      	mov	r3, r1
 80a0612:	22fc      	movs	r2, #252	; 0xfc
 80a0614:	210a      	movs	r1, #10
 80a0616:	f7ff bfbd 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>

080a061a <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a061a:	460b      	mov	r3, r1
 80a061c:	221f      	movs	r2, #31
 80a061e:	2108      	movs	r1, #8
 80a0620:	f7ff bfb8 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>

080a0624 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a0624:	2310      	movs	r3, #16
 80a0626:	22ef      	movs	r2, #239	; 0xef
 80a0628:	2108      	movs	r1, #8
 80a062a:	f7ff bfb3 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>

080a062e <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
 80a062e:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a0630:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
 80a0632:	2903      	cmp	r1, #3
 80a0634:	d814      	bhi.n	80a0660 <_ZN8MAX3010510enableSlotEhh+0x32>
 80a0636:	e8df f001 	tbb	[pc, r1]
 80a063a:	0402      	.short	0x0402
 80a063c:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a063e:	22f8      	movs	r2, #248	; 0xf8
 80a0640:	e003      	b.n	80a064a <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0642:	011b      	lsls	r3, r3, #4
 80a0644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a0648:	228f      	movs	r2, #143	; 0x8f
 80a064a:	2111      	movs	r1, #17
 80a064c:	e006      	b.n	80a065c <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a064e:	22f8      	movs	r2, #248	; 0xf8
 80a0650:	e003      	b.n	80a065a <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a0652:	011b      	lsls	r3, r3, #4
 80a0654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a0658:	228f      	movs	r2, #143	; 0x8f
 80a065a:	2112      	movs	r1, #18
 80a065c:	f7ff bf9a 	b.w	80a0594 <_ZN8MAX301057bitMaskEhhh>
 80a0660:	4770      	bx	lr

080a0662 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a0662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0666:	4616      	mov	r6, r2
 80a0668:	ad08      	add	r5, sp, #32
 80a066a:	4604      	mov	r4, r0
 80a066c:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
 80a0670:	4688      	mov	r8, r1
 80a0672:	461f      	mov	r7, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a0674:	f7ff ffa2 	bl	80a05bc <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a0678:	2e01      	cmp	r6, #1
 80a067a:	d101      	bne.n	80a0680 <_ZN8MAX301055setupEhhhiii+0x1e>
 80a067c:	2100      	movs	r1, #0
 80a067e:	e012      	b.n	80a06a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a0680:	2e02      	cmp	r6, #2
 80a0682:	d101      	bne.n	80a0688 <_ZN8MAX301055setupEhhhiii+0x26>
 80a0684:	2120      	movs	r1, #32
 80a0686:	e00e      	b.n	80a06a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a0688:	2e04      	cmp	r6, #4
 80a068a:	d101      	bne.n	80a0690 <_ZN8MAX301055setupEhhhiii+0x2e>
 80a068c:	2140      	movs	r1, #64	; 0x40
 80a068e:	e00a      	b.n	80a06a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a0690:	2e08      	cmp	r6, #8
 80a0692:	d101      	bne.n	80a0698 <_ZN8MAX301055setupEhhhiii+0x36>
 80a0694:	2160      	movs	r1, #96	; 0x60
 80a0696:	e006      	b.n	80a06a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a0698:	2e10      	cmp	r6, #16
 80a069a:	d101      	bne.n	80a06a0 <_ZN8MAX301055setupEhhhiii+0x3e>
 80a069c:	2180      	movs	r1, #128	; 0x80
 80a069e:	e002      	b.n	80a06a6 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a06a0:	2e20      	cmp	r6, #32
 80a06a2:	d1f3      	bne.n	80a068c <_ZN8MAX301055setupEhhhiii+0x2a>
 80a06a4:	21a0      	movs	r1, #160	; 0xa0
 80a06a6:	4620      	mov	r0, r4
 80a06a8:	f7ff ffb7 	bl	80a061a <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a06ac:	4620      	mov	r0, r4
 80a06ae:	f7ff ffb9 	bl	80a0624 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a06b2:	2f03      	cmp	r7, #3
 80a06b4:	d101      	bne.n	80a06ba <_ZN8MAX301055setupEhhhiii+0x58>
 80a06b6:	2107      	movs	r1, #7
 80a06b8:	e003      	b.n	80a06c2 <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a06ba:	2f02      	cmp	r7, #2
 80a06bc:	bf0c      	ite	eq
 80a06be:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a06c0:	2102      	movne	r1, #2
 80a06c2:	4620      	mov	r0, r4
 80a06c4:	f7ff ff95 	bl	80a05f2 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a06c8:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a06cc:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a06ce:	da01      	bge.n	80a06d4 <_ZN8MAX301055setupEhhhiii+0x72>
 80a06d0:	2100      	movs	r1, #0
 80a06d2:	e00b      	b.n	80a06ec <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a06d4:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a06d8:	da01      	bge.n	80a06de <_ZN8MAX301055setupEhhhiii+0x7c>
 80a06da:	2120      	movs	r1, #32
 80a06dc:	e006      	b.n	80a06ec <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a06de:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a06e2:	da01      	bge.n	80a06e8 <_ZN8MAX301055setupEhhhiii+0x86>
 80a06e4:	2140      	movs	r1, #64	; 0x40
 80a06e6:	e001      	b.n	80a06ec <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a06e8:	d1f2      	bne.n	80a06d0 <_ZN8MAX301055setupEhhhiii+0x6e>
 80a06ea:	2160      	movs	r1, #96	; 0x60
 80a06ec:	4620      	mov	r0, r4
 80a06ee:	f7ff ff85 	bl	80a05fc <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a06f2:	2d63      	cmp	r5, #99	; 0x63
 80a06f4:	dc01      	bgt.n	80a06fa <_ZN8MAX301055setupEhhhiii+0x98>
 80a06f6:	2100      	movs	r1, #0
 80a06f8:	e01e      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a06fa:	2dc7      	cmp	r5, #199	; 0xc7
 80a06fc:	dc01      	bgt.n	80a0702 <_ZN8MAX301055setupEhhhiii+0xa0>
 80a06fe:	2104      	movs	r1, #4
 80a0700:	e01a      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a0702:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 80a0706:	da01      	bge.n	80a070c <_ZN8MAX301055setupEhhhiii+0xaa>
 80a0708:	2108      	movs	r1, #8
 80a070a:	e015      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a070c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 80a0710:	da01      	bge.n	80a0716 <_ZN8MAX301055setupEhhhiii+0xb4>
 80a0712:	210c      	movs	r1, #12
 80a0714:	e010      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a0716:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80a071a:	da01      	bge.n	80a0720 <_ZN8MAX301055setupEhhhiii+0xbe>
 80a071c:	2110      	movs	r1, #16
 80a071e:	e00b      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a0720:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80a0724:	da01      	bge.n	80a072a <_ZN8MAX301055setupEhhhiii+0xc8>
 80a0726:	2114      	movs	r1, #20
 80a0728:	e006      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a072a:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
 80a072e:	da01      	bge.n	80a0734 <_ZN8MAX301055setupEhhhiii+0xd2>
 80a0730:	2118      	movs	r1, #24
 80a0732:	e001      	b.n	80a0738 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a0734:	d1df      	bne.n	80a06f6 <_ZN8MAX301055setupEhhhiii+0x94>
 80a0736:	211c      	movs	r1, #28
 80a0738:	4620      	mov	r0, r4
 80a073a:	f7ff ff64 	bl	80a0606 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a073e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a0742:	dc01      	bgt.n	80a0748 <_ZN8MAX301055setupEhhhiii+0xe6>
 80a0744:	2100      	movs	r1, #0
 80a0746:	e00e      	b.n	80a0766 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a0748:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a074c:	dc01      	bgt.n	80a0752 <_ZN8MAX301055setupEhhhiii+0xf0>
 80a074e:	2101      	movs	r1, #1
 80a0750:	e009      	b.n	80a0766 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a0752:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a0756:	dc01      	bgt.n	80a075c <_ZN8MAX301055setupEhhhiii+0xfa>
 80a0758:	2102      	movs	r1, #2
 80a075a:	e004      	b.n	80a0766 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a075c:	f240 139b 	movw	r3, #411	; 0x19b
 80a0760:	4599      	cmp	r9, r3
 80a0762:	d1ef      	bne.n	80a0744 <_ZN8MAX301055setupEhhhiii+0xe2>
 80a0764:	2103      	movs	r1, #3
 80a0766:	4620      	mov	r0, r4
 80a0768:	f7ff ff52 	bl	80a0610 <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
 80a076c:	4641      	mov	r1, r8
 80a076e:	4620      	mov	r0, r4
 80a0770:	f7ff fee7 	bl	80a0542 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a0774:	4641      	mov	r1, r8
 80a0776:	4620      	mov	r0, r4
 80a0778:	f7ff fee8 	bl	80a054c <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a077c:	4641      	mov	r1, r8
 80a077e:	4620      	mov	r0, r4
 80a0780:	f7ff fee9 	bl	80a0556 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a0784:	4641      	mov	r1, r8
 80a0786:	4620      	mov	r0, r4
 80a0788:	f7ff feea 	bl	80a0560 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
 80a078c:	2201      	movs	r2, #1
 80a078e:	4611      	mov	r1, r2
 80a0790:	4620      	mov	r0, r4
 80a0792:	f7ff ff4c 	bl	80a062e <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a0796:	2f01      	cmp	r7, #1
 80a0798:	d90c      	bls.n	80a07b4 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a079a:	2320      	movs	r3, #32
 80a079c:	228f      	movs	r2, #143	; 0x8f
 80a079e:	2111      	movs	r1, #17
 80a07a0:	4620      	mov	r0, r4
 80a07a2:	f7ff fef7 	bl	80a0594 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a07a6:	2f02      	cmp	r7, #2
 80a07a8:	d004      	beq.n	80a07b4 <_ZN8MAX301055setupEhhhiii+0x152>
 80a07aa:	2203      	movs	r2, #3
 80a07ac:	4611      	mov	r1, r2
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	f7ff ff3d 	bl	80a062e <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a07b4:	4620      	mov	r0, r4
}
 80a07b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a07ba:	f7ff bed6 	b.w	80a056a <_ZN8MAX301059clearFIFOEv>

080a07be <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
 80a07be:	f000 b8c1 	b.w	80a0944 <HAL_Pin_Map>

080a07c2 <_Z18averageDCEstimatorPlt>:
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
  *p += ((((long) x << 15) - *p) >> 4);
 80a07c2:	6803      	ldr	r3, [r0, #0]
 80a07c4:	ebc3 31c1 	rsb	r1, r3, r1, lsl #15
 80a07c8:	eb03 1321 	add.w	r3, r3, r1, asr #4
 80a07cc:	6003      	str	r3, [r0, #0]
  return (*p >> 15);
}
 80a07ce:	f343 30cf 	sbfx	r0, r3, #15, #16
 80a07d2:	4770      	bx	lr

080a07d4 <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a07d4:	4916      	ldr	r1, [pc, #88]	; (80a0830 <_Z16lowPassFIRFilters+0x5c>)
  return (*p >> 15);
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
 80a07d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a07d8:	460e      	mov	r6, r1
  cbuf[offset] = din;
 80a07da:	4d16      	ldr	r5, [pc, #88]	; (80a0834 <_Z16lowPassFIRFilters+0x60>)

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a07dc:	4f16      	ldr	r7, [pc, #88]	; (80a0838 <_Z16lowPassFIRFilters+0x64>)
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a07de:	782b      	ldrb	r3, [r5, #0]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 80a07e0:	f1a3 020b 	sub.w	r2, r3, #11
 80a07e4:	f002 021f 	and.w	r2, r2, #31
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a07e8:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
 80a07ec:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a07f0:	f1a3 0e16 	sub.w	lr, r3, #22
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
 80a07f4:	0300      	lsls	r0, r0, #12
 80a07f6:	2200      	movs	r2, #0

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a07f8:	eb0e 0102 	add.w	r1, lr, r2
 80a07fc:	1a9c      	subs	r4, r3, r2
 80a07fe:	f001 011f 	and.w	r1, r1, #31
 80a0802:	f004 041f 	and.w	r4, r4, #31
 80a0806:	f836 c011 	ldrh.w	ip, [r6, r1, lsl #1]
 80a080a:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80a080e:	f937 4012 	ldrsh.w	r4, [r7, r2, lsl #1]
 80a0812:	4461      	add	r1, ip
 80a0814:	3201      	adds	r2, #1
 80a0816:	b209      	sxth	r1, r1
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 80a0818:	2a0b      	cmp	r2, #11
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a081a:	fb04 0001 	mla	r0, r4, r1, r0
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 80a081e:	d1eb      	bne.n	80a07f8 <_Z16lowPassFIRFilters+0x24>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
 80a0820:	3301      	adds	r3, #1
 80a0822:	f003 031f 	and.w	r3, r3, #31
 80a0826:	702b      	strb	r3, [r5, #0]

  return(z >> 15);
}
 80a0828:	f340 30cf 	sbfx	r0, r0, #15, #16
 80a082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a082e:	bf00      	nop
 80a0830:	200000d2 	.word	0x200000d2
 80a0834:	20000112 	.word	0x20000112
 80a0838:	080a2e12 	.word	0x080a2e12

080a083c <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
 80a083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a083e:	4d29      	ldr	r5, [pc, #164]	; (80a08e4 <_Z12checkForBeatl+0xa8>)
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a0840:	b282      	uxth	r2, r0
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a0842:	4c29      	ldr	r4, [pc, #164]	; (80a08e8 <_Z12checkForBeatl+0xac>)
 80a0844:	882b      	ldrh	r3, [r5, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a0846:	4611      	mov	r1, r2
 80a0848:	4828      	ldr	r0, [pc, #160]	; (80a08ec <_Z12checkForBeatl+0xb0>)
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a084a:	8023      	strh	r3, [r4, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a084c:	f7ff ffb9 	bl	80a07c2 <_Z18averageDCEstimatorPlt>
 80a0850:	4b27      	ldr	r3, [pc, #156]	; (80a08f0 <_Z12checkForBeatl+0xb4>)
 80a0852:	8018      	strh	r0, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80a0854:	1a10      	subs	r0, r2, r0
 80a0856:	b200      	sxth	r0, r0
 80a0858:	f7ff ffbc 	bl	80a07d4 <_Z16lowPassFIRFilters>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80a085c:	f9b4 2000 	ldrsh.w	r2, [r4]
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80a0860:	8028      	strh	r0, [r5, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80a0862:	2a00      	cmp	r2, #0
 80a0864:	4c23      	ldr	r4, [pc, #140]	; (80a08f4 <_Z12checkForBeatl+0xb8>)
 80a0866:	4924      	ldr	r1, [pc, #144]	; (80a08f8 <_Z12checkForBeatl+0xbc>)
 80a0868:	da1a      	bge.n	80a08a0 <_Z12checkForBeatl+0x64>
 80a086a:	0403      	lsls	r3, r0, #16
 80a086c:	d418      	bmi.n	80a08a0 <_Z12checkForBeatl+0x64>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80a086e:	4e23      	ldr	r6, [pc, #140]	; (80a08fc <_Z12checkForBeatl+0xc0>)
 80a0870:	4d23      	ldr	r5, [pc, #140]	; (80a0900 <_Z12checkForBeatl+0xc4>)
 80a0872:	f9b6 3000 	ldrsh.w	r3, [r6]
    IR_AC_Min = IR_AC_Signal_min;
 80a0876:	4f23      	ldr	r7, [pc, #140]	; (80a0904 <_Z12checkForBeatl+0xc8>)

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80a0878:	802b      	strh	r3, [r5, #0]
    IR_AC_Min = IR_AC_Signal_min;
 80a087a:	4d23      	ldr	r5, [pc, #140]	; (80a0908 <_Z12checkForBeatl+0xcc>)
 80a087c:	f9b5 5000 	ldrsh.w	r5, [r5]
 80a0880:	803d      	strh	r5, [r7, #0]
    positiveEdge = 1;
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a0882:	1b5b      	subs	r3, r3, r5
 80a0884:	f240 35d2 	movw	r5, #978	; 0x3d2
 80a0888:	3b15      	subs	r3, #21
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
 80a088a:	2701      	movs	r7, #1
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a088c:	42ab      	cmp	r3, r5
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
 80a088e:	8027      	strh	r7, [r4, #0]
    negativeEdge = 0;
 80a0890:	f04f 0700 	mov.w	r7, #0
 80a0894:	800f      	strh	r7, [r1, #0]
    IR_AC_Signal_max = 0;
 80a0896:	8037      	strh	r7, [r6, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a0898:	bf8c      	ite	hi
 80a089a:	2300      	movhi	r3, #0
 80a089c:	2301      	movls	r3, #1
 80a089e:	e000      	b.n	80a08a2 <_Z12checkForBeatl+0x66>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
 80a08a0:	2300      	movs	r3, #0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
 80a08a2:	2a00      	cmp	r2, #0
 80a08a4:	dd07      	ble.n	80a08b6 <_Z12checkForBeatl+0x7a>
 80a08a6:	2800      	cmp	r0, #0
 80a08a8:	dc05      	bgt.n	80a08b6 <_Z12checkForBeatl+0x7a>
  {
    positiveEdge = 0;
    negativeEdge = 1;
 80a08aa:	2601      	movs	r6, #1
 80a08ac:	800e      	strh	r6, [r1, #0]
    IR_AC_Signal_min = 0;
 80a08ae:	4e16      	ldr	r6, [pc, #88]	; (80a0908 <_Z12checkForBeatl+0xcc>)
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
  {
    positiveEdge = 0;
 80a08b0:	2500      	movs	r5, #0
 80a08b2:	8025      	strh	r5, [r4, #0]
    negativeEdge = 1;
    IR_AC_Signal_min = 0;
 80a08b4:	8035      	strh	r5, [r6, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 80a08b6:	f9b4 4000 	ldrsh.w	r4, [r4]
 80a08ba:	4290      	cmp	r0, r2
 80a08bc:	bfd4      	ite	le
 80a08be:	2400      	movle	r4, #0
 80a08c0:	f004 0401 	andgt.w	r4, r4, #1
 80a08c4:	b10c      	cbz	r4, 80a08ca <_Z12checkForBeatl+0x8e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
 80a08c6:	4c0d      	ldr	r4, [pc, #52]	; (80a08fc <_Z12checkForBeatl+0xc0>)
 80a08c8:	8020      	strh	r0, [r4, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 80a08ca:	f9b1 1000 	ldrsh.w	r1, [r1]
 80a08ce:	4290      	cmp	r0, r2
 80a08d0:	bfac      	ite	ge
 80a08d2:	2200      	movge	r2, #0
 80a08d4:	f001 0201 	andlt.w	r2, r1, #1
 80a08d8:	b10a      	cbz	r2, 80a08de <_Z12checkForBeatl+0xa2>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
 80a08da:	4a0b      	ldr	r2, [pc, #44]	; (80a0908 <_Z12checkForBeatl+0xcc>)
 80a08dc:	8010      	strh	r0, [r2, #0]
  }
  
  return(beatDetected);
}
 80a08de:	4618      	mov	r0, r3
 80a08e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a08e2:	bf00      	nop
 80a08e4:	200000d0 	.word	0x200000d0
 80a08e8:	200000ce 	.word	0x200000ce
 80a08ec:	200000c8 	.word	0x200000c8
 80a08f0:	200000c2 	.word	0x200000c2
 80a08f4:	20000114 	.word	0x20000114
 80a08f8:	200000c4 	.word	0x200000c4
 80a08fc:	20000116 	.word	0x20000116
 80a0900:	20000002 	.word	0x20000002
 80a0904:	20000000 	.word	0x20000000
 80a0908:	200000cc 	.word	0x200000cc

080a090c <_GLOBAL__sub_I_IR_AC_Max>:
 80a090c:	f000 b81a 	b.w	80a0944 <HAL_Pin_Map>

080a0910 <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
 80a0910:	f000 b818 	b.w	80a0944 <HAL_Pin_Map>

080a0914 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <os_mutex_create+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601d0 	.word	0x080601d0

080a0924 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <HAL_RNG_GetRandomNumber+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	685b      	ldr	r3, [r3, #4]
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	0806019c 	.word	0x0806019c

080a0934 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	695b      	ldr	r3, [r3, #20]
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	0806019c 	.word	0x0806019c

080a0944 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <HAL_Pin_Map+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	681b      	ldr	r3, [r3, #0]
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601b0 	.word	0x080601b0

080a0954 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <HAL_I2C_Set_Speed+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601ac 	.word	0x080601ac

080a0964 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <HAL_I2C_Begin+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601ac 	.word	0x080601ac

080a0974 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <HAL_I2C_Request_Data+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601ac 	.word	0x080601ac

080a0984 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <HAL_I2C_Begin_Transmission+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601ac 	.word	0x080601ac

080a0994 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <HAL_I2C_End_Transmission+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601ac 	.word	0x080601ac

080a09a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <HAL_I2C_Write_Data+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601ac 	.word	0x080601ac

080a09b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <HAL_I2C_Available_Data+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601ac 	.word	0x080601ac

080a09c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <HAL_I2C_Read_Data+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601ac 	.word	0x080601ac

080a09d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <HAL_I2C_Peek_Data+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601ac 	.word	0x080601ac

080a09e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <HAL_I2C_Flush_Data+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601ac 	.word	0x080601ac

080a09f4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b03      	ldr	r3, [pc, #12]	; (80a0a04 <HAL_I2C_Init+0x10>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a09fe:	9301      	str	r3, [sp, #4]
 80a0a00:	bd08      	pop	{r3, pc}
 80a0a02:	0000      	.short	0x0000
 80a0a04:	080601ac 	.word	0x080601ac

080a0a08 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <HAL_SPI_Init+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	69db      	ldr	r3, [r3, #28]
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601b4 	.word	0x080601b4

080a0a18 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <HAL_USART_Init+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	699b      	ldr	r3, [r3, #24]
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601c4 	.word	0x080601c4

080a0a28 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <HAL_USART_Write_Data+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601c4 	.word	0x080601c4

080a0a38 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <HAL_USART_Available_Data+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601c4 	.word	0x080601c4

080a0a48 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <HAL_USART_Read_Data+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601c4 	.word	0x080601c4

080a0a58 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <HAL_USART_Peek_Data+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601c4 	.word	0x080601c4

080a0a68 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <HAL_USART_Flush_Data+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601c4 	.word	0x080601c4

080a0a78 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601c4 	.word	0x080601c4

080a0a88 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <HAL_USB_USART_Init+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	681b      	ldr	r3, [r3, #0]
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601d8 	.word	0x080601d8

080a0a98 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <HAL_USB_USART_Begin+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	685b      	ldr	r3, [r3, #4]
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601d8 	.word	0x080601d8

080a0aa8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <HAL_USB_USART_Available_Data+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	691b      	ldr	r3, [r3, #16]
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601d8 	.word	0x080601d8

080a0ab8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	695b      	ldr	r3, [r3, #20]
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601d8 	.word	0x080601d8

080a0ac8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <HAL_USB_USART_Receive_Data+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	699b      	ldr	r3, [r3, #24]
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601d8 	.word	0x080601d8

080a0ad8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <HAL_USB_USART_Send_Data+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	69db      	ldr	r3, [r3, #28]
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601d8 	.word	0x080601d8

080a0ae8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <HAL_USB_USART_Flush_Data+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	6a1b      	ldr	r3, [r3, #32]
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601d8 	.word	0x080601d8

080a0af8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <inet_gethostbyname+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601c0 	.word	0x080601c0

080a0b08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <set_system_mode+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	685b      	ldr	r3, [r3, #4]
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601a4 	.word	0x080601a4

080a0b18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <system_delay_ms+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	695b      	ldr	r3, [r3, #20]
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601a4 	.word	0x080601a4

080a0b28 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <application_thread_current+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601a4 	.word	0x080601a4

080a0b38 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <application_thread_invoke+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601a4 	.word	0x080601a4

080a0b48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b03      	ldr	r3, [pc, #12]	; (80a0b58 <system_ctrl_set_app_request_handler+0x10>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0b52:	9301      	str	r3, [sp, #4]
 80a0b54:	bd08      	pop	{r3, pc}
 80a0b56:	0000      	.short	0x0000
 80a0b58:	080601a4 	.word	0x080601a4

080a0b5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b03      	ldr	r3, [pc, #12]	; (80a0b6c <system_ctrl_set_result+0x10>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0b66:	9301      	str	r3, [sp, #4]
 80a0b68:	bd08      	pop	{r3, pc}
 80a0b6a:	0000      	.short	0x0000
 80a0b6c:	080601a4 	.word	0x080601a4

080a0b70 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <spark_cloud_flag_connected+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	695b      	ldr	r3, [r3, #20]
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601cc 	.word	0x080601cc

080a0b80 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <spark_send_event+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	6a1b      	ldr	r3, [r3, #32]
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601cc 	.word	0x080601cc

080a0b90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601cc 	.word	0x080601cc

080a0ba0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <network_connect+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	685b      	ldr	r3, [r3, #4]
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601c8 	.word	0x080601c8

080a0bb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <network_connecting+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	689b      	ldr	r3, [r3, #8]
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601c8 	.word	0x080601c8

080a0bc0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <network_disconnect+0xc>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	68db      	ldr	r3, [r3, #12]
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	bd08      	pop	{r3, pc}
 80a0bcc:	080601c8 	.word	0x080601c8

080a0bd0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0bd0:	b508      	push	{r3, lr}
 80a0bd2:	4b02      	ldr	r3, [pc, #8]	; (80a0bdc <network_ready+0xc>)
 80a0bd4:	681b      	ldr	r3, [r3, #0]
 80a0bd6:	691b      	ldr	r3, [r3, #16]
 80a0bd8:	9301      	str	r3, [sp, #4]
 80a0bda:	bd08      	pop	{r3, pc}
 80a0bdc:	080601c8 	.word	0x080601c8

080a0be0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0be0:	b508      	push	{r3, lr}
 80a0be2:	4b02      	ldr	r3, [pc, #8]	; (80a0bec <network_on+0xc>)
 80a0be4:	681b      	ldr	r3, [r3, #0]
 80a0be6:	695b      	ldr	r3, [r3, #20]
 80a0be8:	9301      	str	r3, [sp, #4]
 80a0bea:	bd08      	pop	{r3, pc}
 80a0bec:	080601c8 	.word	0x080601c8

080a0bf0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0bf0:	b508      	push	{r3, lr}
 80a0bf2:	4b02      	ldr	r3, [pc, #8]	; (80a0bfc <network_off+0xc>)
 80a0bf4:	681b      	ldr	r3, [r3, #0]
 80a0bf6:	699b      	ldr	r3, [r3, #24]
 80a0bf8:	9301      	str	r3, [sp, #4]
 80a0bfa:	bd08      	pop	{r3, pc}
 80a0bfc:	080601c8 	.word	0x080601c8

080a0c00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0c00:	b508      	push	{r3, lr}
 80a0c02:	4b02      	ldr	r3, [pc, #8]	; (80a0c0c <network_listen+0xc>)
 80a0c04:	681b      	ldr	r3, [r3, #0]
 80a0c06:	69db      	ldr	r3, [r3, #28]
 80a0c08:	9301      	str	r3, [sp, #4]
 80a0c0a:	bd08      	pop	{r3, pc}
 80a0c0c:	080601c8 	.word	0x080601c8

080a0c10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0c10:	b508      	push	{r3, lr}
 80a0c12:	4b02      	ldr	r3, [pc, #8]	; (80a0c1c <network_listening+0xc>)
 80a0c14:	681b      	ldr	r3, [r3, #0]
 80a0c16:	6a1b      	ldr	r3, [r3, #32]
 80a0c18:	9301      	str	r3, [sp, #4]
 80a0c1a:	bd08      	pop	{r3, pc}
 80a0c1c:	080601c8 	.word	0x080601c8

080a0c20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0c20:	b508      	push	{r3, lr}
 80a0c22:	4b02      	ldr	r3, [pc, #8]	; (80a0c2c <network_set_listen_timeout+0xc>)
 80a0c24:	681b      	ldr	r3, [r3, #0]
 80a0c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c28:	9301      	str	r3, [sp, #4]
 80a0c2a:	bd08      	pop	{r3, pc}
 80a0c2c:	080601c8 	.word	0x080601c8

080a0c30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0c30:	b508      	push	{r3, lr}
 80a0c32:	4b02      	ldr	r3, [pc, #8]	; (80a0c3c <network_get_listen_timeout+0xc>)
 80a0c34:	681b      	ldr	r3, [r3, #0]
 80a0c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c38:	9301      	str	r3, [sp, #4]
 80a0c3a:	bd08      	pop	{r3, pc}
 80a0c3c:	080601c8 	.word	0x080601c8

080a0c40 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0c40:	b508      	push	{r3, lr}
 80a0c42:	4b02      	ldr	r3, [pc, #8]	; (80a0c4c <malloc+0xc>)
 80a0c44:	681b      	ldr	r3, [r3, #0]
 80a0c46:	681b      	ldr	r3, [r3, #0]
 80a0c48:	9301      	str	r3, [sp, #4]
 80a0c4a:	bd08      	pop	{r3, pc}
 80a0c4c:	080601a0 	.word	0x080601a0

080a0c50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0c50:	b508      	push	{r3, lr}
 80a0c52:	4b02      	ldr	r3, [pc, #8]	; (80a0c5c <free+0xc>)
 80a0c54:	681b      	ldr	r3, [r3, #0]
 80a0c56:	685b      	ldr	r3, [r3, #4]
 80a0c58:	9301      	str	r3, [sp, #4]
 80a0c5a:	bd08      	pop	{r3, pc}
 80a0c5c:	080601a0 	.word	0x080601a0

080a0c60 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0c60:	b508      	push	{r3, lr}
 80a0c62:	4b02      	ldr	r3, [pc, #8]	; (80a0c6c <realloc+0xc>)
 80a0c64:	681b      	ldr	r3, [r3, #0]
 80a0c66:	689b      	ldr	r3, [r3, #8]
 80a0c68:	9301      	str	r3, [sp, #4]
 80a0c6a:	bd08      	pop	{r3, pc}
 80a0c6c:	080601a0 	.word	0x080601a0

080a0c70 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0c70:	b508      	push	{r3, lr}
 80a0c72:	4b02      	ldr	r3, [pc, #8]	; (80a0c7c <vsnprintf+0xc>)
 80a0c74:	681b      	ldr	r3, [r3, #0]
 80a0c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c78:	9301      	str	r3, [sp, #4]
 80a0c7a:	bd08      	pop	{r3, pc}
 80a0c7c:	080601a0 	.word	0x080601a0

080a0c80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0c80:	b508      	push	{r3, lr}
 80a0c82:	4b02      	ldr	r3, [pc, #8]	; (80a0c8c <abort+0xc>)
 80a0c84:	681b      	ldr	r3, [r3, #0]
 80a0c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c88:	9301      	str	r3, [sp, #4]
 80a0c8a:	bd08      	pop	{r3, pc}
 80a0c8c:	080601a0 	.word	0x080601a0

080a0c90 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0c90:	b508      	push	{r3, lr}
 80a0c92:	4b02      	ldr	r3, [pc, #8]	; (80a0c9c <_malloc_r+0xc>)
 80a0c94:	681b      	ldr	r3, [r3, #0]
 80a0c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c98:	9301      	str	r3, [sp, #4]
 80a0c9a:	bd08      	pop	{r3, pc}
 80a0c9c:	080601a0 	.word	0x080601a0

080a0ca0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0ca0:	2100      	movs	r1, #0
 80a0ca2:	f7ff bf39 	b.w	80a0b18 <system_delay_ms>

080a0ca6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0ca6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0ca8:	6883      	ldr	r3, [r0, #8]
 80a0caa:	4604      	mov	r4, r0
 80a0cac:	b90b      	cbnz	r3, 80a0cb2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0cae:	f001 f8fc 	bl	80a1eaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0cb2:	68c3      	ldr	r3, [r0, #12]
 80a0cb4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0cb6:	68a3      	ldr	r3, [r4, #8]
 80a0cb8:	b11b      	cbz	r3, 80a0cc2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0cba:	2203      	movs	r2, #3
 80a0cbc:	4621      	mov	r1, r4
 80a0cbe:	4620      	mov	r0, r4
 80a0cc0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0cc2:	4620      	mov	r0, r4
}
 80a0cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0cc8:	2110      	movs	r1, #16
 80a0cca:	f001 b8ec 	b.w	80a1ea6 <_ZdlPvj>

080a0cce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0cce:	4770      	bx	lr

080a0cd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0cd0:	2000      	movs	r0, #0
 80a0cd2:	4770      	bx	lr

080a0cd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0cd4:	b510      	push	{r4, lr}
 80a0cd6:	4604      	mov	r4, r0
 80a0cd8:	2110      	movs	r1, #16
 80a0cda:	f001 f8e4 	bl	80a1ea6 <_ZdlPvj>
 80a0cde:	4620      	mov	r0, r4
 80a0ce0:	bd10      	pop	{r4, pc}

080a0ce2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0ce2:	b508      	push	{r3, lr}
      { delete this; }
 80a0ce4:	b108      	cbz	r0, 80a0cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0ce6:	f7ff fff5 	bl	80a0cd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0cea:	bd08      	pop	{r3, pc}

080a0cec <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0cec:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0cee:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0cf0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0cf2:	b113      	cbz	r3, 80a0cfa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0cf4:	2203      	movs	r2, #3
 80a0cf6:	4601      	mov	r1, r0
 80a0cf8:	4798      	blx	r3
    }
 80a0cfa:	4620      	mov	r0, r4
 80a0cfc:	bd10      	pop	{r4, pc}

080a0cfe <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0cfe:	2200      	movs	r2, #0
 80a0d00:	6002      	str	r2, [r0, #0]
 80a0d02:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0d06:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0d08:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d0a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0d0e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d10:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d12:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0d14:	680c      	ldr	r4, [r1, #0]
 80a0d16:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d18:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0d1a:	bd10      	pop	{r4, pc}

080a0d1c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0d1c:	b510      	push	{r4, lr}
 80a0d1e:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0d20:	6800      	ldr	r0, [r0, #0]
 80a0d22:	f7ff ff95 	bl	80a0c50 <free>
}
 80a0d26:	4620      	mov	r0, r4
 80a0d28:	bd10      	pop	{r4, pc}

080a0d2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0d2a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0d2c:	68c4      	ldr	r4, [r0, #12]
 80a0d2e:	b1f4      	cbz	r4, 80a0d6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0d30:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0d32:	2b02      	cmp	r3, #2
 80a0d34:	d103      	bne.n	80a0d3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0d36:	f104 000c 	add.w	r0, r4, #12
 80a0d3a:	f7ff ffef 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0d3e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d40:	b135      	cbz	r5, 80a0d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d42:	4628      	mov	r0, r5
 80a0d44:	f7ff ffd2 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
 80a0d48:	2110      	movs	r1, #16
 80a0d4a:	4628      	mov	r0, r5
 80a0d4c:	f001 f8ab 	bl	80a1ea6 <_ZdlPvj>
 80a0d50:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0d52:	b135      	cbz	r5, 80a0d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0d54:	4628      	mov	r0, r5
 80a0d56:	f7ff ffc9 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
 80a0d5a:	2110      	movs	r1, #16
 80a0d5c:	4628      	mov	r0, r5
 80a0d5e:	f001 f8a2 	bl	80a1ea6 <_ZdlPvj>
 80a0d62:	4620      	mov	r0, r4
 80a0d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0d68:	2114      	movs	r1, #20
 80a0d6a:	f001 b89c 	b.w	80a1ea6 <_ZdlPvj>
 80a0d6e:	bd38      	pop	{r3, r4, r5, pc}

080a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d70:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0d72:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d74:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0d76:	b17c      	cbz	r4, 80a0d98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0d78:	6863      	ldr	r3, [r4, #4]
 80a0d7a:	3b01      	subs	r3, #1
 80a0d7c:	6063      	str	r3, [r4, #4]
 80a0d7e:	b95b      	cbnz	r3, 80a0d98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0d80:	6823      	ldr	r3, [r4, #0]
 80a0d82:	4620      	mov	r0, r4
 80a0d84:	689b      	ldr	r3, [r3, #8]
 80a0d86:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0d88:	68a3      	ldr	r3, [r4, #8]
 80a0d8a:	3b01      	subs	r3, #1
 80a0d8c:	60a3      	str	r3, [r4, #8]
 80a0d8e:	b91b      	cbnz	r3, 80a0d98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0d90:	6823      	ldr	r3, [r4, #0]
 80a0d92:	4620      	mov	r0, r4
 80a0d94:	68db      	ldr	r3, [r3, #12]
 80a0d96:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0d98:	4628      	mov	r0, r5
 80a0d9a:	bd38      	pop	{r3, r4, r5, pc}

080a0d9c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0d9c:	b513      	push	{r0, r1, r4, lr}
 80a0d9e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0da0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0da4:	2300      	movs	r3, #0
 80a0da6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0da8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0daa:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0dac:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dae:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0db0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0db2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0db4:	f7ff ffdc 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	b002      	add	sp, #8
 80a0dbc:	bd10      	pop	{r4, pc}

080a0dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0dbe:	680b      	ldr	r3, [r1, #0]
 80a0dc0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0dc2:	b113      	cbz	r3, 80a0dca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0dc4:	685a      	ldr	r2, [r3, #4]
 80a0dc6:	3201      	adds	r2, #1
 80a0dc8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0dca:	4770      	bx	lr

080a0dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0dce:	460c      	mov	r4, r1
 80a0dd0:	4606      	mov	r6, r0
 80a0dd2:	460f      	mov	r7, r1
 80a0dd4:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0dd8:	ad02      	add	r5, sp, #8
 80a0dda:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0dde:	4621      	mov	r1, r4
 80a0de0:	a801      	add	r0, sp, #4
 80a0de2:	f7ff ffec 	bl	80a0dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0de6:	4629      	mov	r1, r5
 80a0de8:	4630      	mov	r0, r6
 80a0dea:	f7ff ffd7 	bl	80a0d9c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dee:	a801      	add	r0, sp, #4
 80a0df0:	f7ff ffbe 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	f7ff ffbb 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0dfa:	4638      	mov	r0, r7
 80a0dfc:	2108      	movs	r1, #8
 80a0dfe:	f001 f852 	bl	80a1ea6 <_ZdlPvj>
        return p;
    }
 80a0e02:	4630      	mov	r0, r6
 80a0e04:	b003      	add	sp, #12
 80a0e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e08 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0e08:	b513      	push	{r0, r1, r4, lr}
 80a0e0a:	460b      	mov	r3, r1
 80a0e0c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e0e:	c803      	ldmia	r0, {r0, r1}
 80a0e10:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0e14:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0e18:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e1c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0e20:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0e24:	b002      	add	sp, #8
 80a0e26:	bd10      	pop	{r4, pc}

080a0e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e28:	b538      	push	{r3, r4, r5, lr}
 80a0e2a:	2300      	movs	r3, #0
 80a0e2c:	4604      	mov	r4, r0
 80a0e2e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e30:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e32:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e34:	f7ff f931 	bl	80a009a <_Znwj>
 80a0e38:	b128      	cbz	r0, 80a0e46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e3a:	2301      	movs	r3, #1
 80a0e3c:	6043      	str	r3, [r0, #4]
 80a0e3e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0e40:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0e42:	60c5      	str	r5, [r0, #12]
 80a0e44:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e46:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0e48:	4620      	mov	r0, r4
 80a0e4a:	bd38      	pop	{r3, r4, r5, pc}
 80a0e4c:	080a2e34 	.word	0x080a2e34

080a0e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e50:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e52:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e54:	b90a      	cbnz	r2, 80a0e5a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0e56:	f001 f828 	bl	80a1eaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e5a:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e60:	4718      	bx	r3

080a0e62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e62:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e64:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e66:	f100 0110 	add.w	r1, r0, #16
 80a0e6a:	f7ff fff1 	bl	80a0e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0e6e:	bd08      	pop	{r3, pc}

080a0e70 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e74:	b90a      	cbnz	r2, 80a0e7a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0e76:	f001 f818 	bl	80a1eaa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e7a:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e80:	4718      	bx	r3

080a0e82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e82:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e84:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e86:	f100 0110 	add.w	r1, r0, #16
 80a0e8a:	f7ff fff1 	bl	80a0e70 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0e8e:	bd08      	pop	{r3, pc}

080a0e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e90:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e92:	2300      	movs	r3, #0
 80a0e94:	6083      	str	r3, [r0, #8]
 80a0e96:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e98:	4604      	mov	r4, r0
 80a0e9a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0e9c:	b12b      	cbz	r3, 80a0eaa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0e9e:	2202      	movs	r2, #2
 80a0ea0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ea2:	68eb      	ldr	r3, [r5, #12]
 80a0ea4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0ea6:	68ab      	ldr	r3, [r5, #8]
 80a0ea8:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0eaa:	4620      	mov	r0, r4
 80a0eac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0eb2:	b089      	sub	sp, #36	; 0x24
 80a0eb4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0eb6:	4668      	mov	r0, sp
 80a0eb8:	f7ff ff21 	bl	80a0cfe <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ebc:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ec0:	2300      	movs	r3, #0
 80a0ec2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ec6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0eca:	2b00      	cmp	r3, #0
 80a0ecc:	d103      	bne.n	80a0ed6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0ece:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0ed2:	2900      	cmp	r1, #0
 80a0ed4:	d1f7      	bne.n	80a0ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0ed6:	d002      	beq.n	80a0ede <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0ed8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0edc:	e063      	b.n	80a0fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0ede:	f114 050c 	adds.w	r5, r4, #12
 80a0ee2:	d003      	beq.n	80a0eec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0ee4:	4669      	mov	r1, sp
 80a0ee6:	4628      	mov	r0, r5
 80a0ee8:	f7ff ff09 	bl	80a0cfe <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0eec:	f3bf 8f5f 	dmb	sy
 80a0ef0:	2301      	movs	r3, #1
 80a0ef2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0ef4:	f3bf 8f5f 	dmb	sy
 80a0ef8:	f104 0308 	add.w	r3, r4, #8
 80a0efc:	2000      	movs	r0, #0
 80a0efe:	e853 6f00 	ldrex	r6, [r3]
 80a0f02:	e843 0200 	strex	r2, r0, [r3]
 80a0f06:	2a00      	cmp	r2, #0
 80a0f08:	d1f9      	bne.n	80a0efe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0f0a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0f0e:	2e00      	cmp	r6, #0
 80a0f10:	d049      	beq.n	80a0fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0f12:	f7ff fe09 	bl	80a0b28 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f16:	b120      	cbz	r0, 80a0f22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f18:	4629      	mov	r1, r5
 80a0f1a:	4630      	mov	r0, r6
 80a0f1c:	f7ff ff98 	bl	80a0e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0f20:	e03a      	b.n	80a0f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f22:	4631      	mov	r1, r6
 80a0f24:	a802      	add	r0, sp, #8
 80a0f26:	f7ff ffb3 	bl	80a0e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0f2a:	68e0      	ldr	r0, [r4, #12]
 80a0f2c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0f30:	b108      	cbz	r0, 80a0f36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0f32:	f001 fee5 	bl	80a2d00 <strdup>
 80a0f36:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f38:	2010      	movs	r0, #16
 80a0f3a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f3e:	f7ff f8ac 	bl	80a009a <_Znwj>
 80a0f42:	4605      	mov	r5, r0
 80a0f44:	b1e8      	cbz	r0, 80a0f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f46:	2700      	movs	r7, #0
 80a0f48:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f4a:	2018      	movs	r0, #24
 80a0f4c:	f7ff f8a5 	bl	80a009a <_Znwj>
 80a0f50:	4604      	mov	r4, r0
 80a0f52:	b188      	cbz	r0, 80a0f78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f54:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f56:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f58:	a802      	add	r0, sp, #8
 80a0f5a:	f7ff ff55 	bl	80a0e08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f5e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f60:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f62:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f64:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f66:	9204      	str	r2, [sp, #16]
 80a0f68:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f6a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f6c:	60e3      	str	r3, [r4, #12]
 80a0f6e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f72:	9205      	str	r2, [sp, #20]
 80a0f74:	f7ff fec3 	bl	80a0cfe <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f78:	4b0d      	ldr	r3, [pc, #52]	; (80a0fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f7a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f7c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f7e:	4b0d      	ldr	r3, [pc, #52]	; (80a0fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0f80:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0f82:	a806      	add	r0, sp, #24
 80a0f84:	f7ff feca 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f88:	a802      	add	r0, sp, #8
 80a0f8a:	f7ff feaf 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f8e:	2200      	movs	r2, #0
 80a0f90:	4629      	mov	r1, r5
 80a0f92:	4809      	ldr	r0, [pc, #36]	; (80a0fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0f94:	f7ff fdd0 	bl	80a0b38 <application_thread_invoke>
 80a0f98:	4630      	mov	r0, r6
 80a0f9a:	f7ff fea7 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0f9e:	2110      	movs	r1, #16
 80a0fa0:	4630      	mov	r0, r6
 80a0fa2:	f000 ff80 	bl	80a1ea6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0fa6:	4668      	mov	r0, sp
 80a0fa8:	f7ff feb8 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
    }
 80a0fac:	b009      	add	sp, #36	; 0x24
 80a0fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0fb0:	080a0e63 	.word	0x080a0e63
 80a0fb4:	080a10d9 	.word	0x080a10d9
 80a0fb8:	080a0ca7 	.word	0x080a0ca7

080a0fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fc0:	b08b      	sub	sp, #44	; 0x2c
 80a0fc2:	4606      	mov	r6, r0
 80a0fc4:	460f      	mov	r7, r1
 80a0fc6:	4690      	mov	r8, r2
 80a0fc8:	4699      	mov	r9, r3
 80a0fca:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0fce:	f7ff fdcf 	bl	80a0b70 <spark_cloud_flag_connected>
 80a0fd2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0fd4:	4683      	mov	fp, r0
 80a0fd6:	bb30      	cbnz	r0, 80a1026 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0fd8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0fdc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0fde:	a905      	add	r1, sp, #20
 80a0fe0:	4628      	mov	r0, r5
 80a0fe2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0fe6:	f7ff fe8a 	bl	80a0cfe <_ZN8particle5ErrorC1EOS0_>
 80a0fea:	2014      	movs	r0, #20
 80a0fec:	f7ff f855 	bl	80a009a <_Znwj>
 80a0ff0:	4604      	mov	r4, r0
 80a0ff2:	b158      	cbz	r0, 80a100c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0ff4:	2302      	movs	r3, #2
 80a0ff6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0ff8:	2301      	movs	r3, #1
 80a0ffa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0ffc:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1000:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1004:	4629      	mov	r1, r5
 80a1006:	300c      	adds	r0, #12
 80a1008:	f7ff fe79 	bl	80a0cfe <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a100c:	4630      	mov	r0, r6
 80a100e:	4621      	mov	r1, r4
 80a1010:	f840 4b04 	str.w	r4, [r0], #4
 80a1014:	f7ff ff08 	bl	80a0e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1018:	4628      	mov	r0, r5
 80a101a:	f7ff fe7f 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a101e:	a805      	add	r0, sp, #20
 80a1020:	f7ff fe7c 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
 80a1024:	e052      	b.n	80a10cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1026:	2400      	movs	r4, #0
 80a1028:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a102a:	2014      	movs	r0, #20
 80a102c:	606c      	str	r4, [r5, #4]
 80a102e:	60ac      	str	r4, [r5, #8]
 80a1030:	9307      	str	r3, [sp, #28]
 80a1032:	f7ff f832 	bl	80a009a <_Znwj>
 80a1036:	4601      	mov	r1, r0
 80a1038:	b118      	cbz	r0, 80a1042 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a103a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a103c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a103e:	6044      	str	r4, [r0, #4]
 80a1040:	6084      	str	r4, [r0, #8]
 80a1042:	a804      	add	r0, sp, #16
 80a1044:	9103      	str	r1, [sp, #12]
 80a1046:	f7ff feef 	bl	80a0e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a104a:	4b22      	ldr	r3, [pc, #136]	; (80a10d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a104c:	2008      	movs	r0, #8
 80a104e:	9308      	str	r3, [sp, #32]
 80a1050:	f7ff f823 	bl	80a009a <_Znwj>
 80a1054:	4604      	mov	r4, r0
 80a1056:	b128      	cbz	r0, 80a1064 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1058:	9b03      	ldr	r3, [sp, #12]
 80a105a:	a904      	add	r1, sp, #16
 80a105c:	f840 3b04 	str.w	r3, [r0], #4
 80a1060:	f7ff fead 	bl	80a0dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1064:	9500      	str	r5, [sp, #0]
 80a1066:	fa5f f38a 	uxtb.w	r3, sl
 80a106a:	464a      	mov	r2, r9
 80a106c:	4641      	mov	r1, r8
 80a106e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1070:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1072:	f7ff fd85 	bl	80a0b80 <spark_send_event>
 80a1076:	b920      	cbnz	r0, 80a1082 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1078:	9b03      	ldr	r3, [sp, #12]
 80a107a:	785b      	ldrb	r3, [r3, #1]
 80a107c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1080:	b183      	cbz	r3, 80a10a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1082:	9b03      	ldr	r3, [sp, #12]
 80a1084:	a904      	add	r1, sp, #16
 80a1086:	a806      	add	r0, sp, #24
 80a1088:	9305      	str	r3, [sp, #20]
 80a108a:	f7ff fe98 	bl	80a0dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a108e:	a905      	add	r1, sp, #20
 80a1090:	4630      	mov	r0, r6
 80a1092:	f7ff fe83 	bl	80a0d9c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1096:	a806      	add	r0, sp, #24
 80a1098:	f7ff fe6a 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a109c:	a804      	add	r0, sp, #16
 80a109e:	f7ff fe67 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10a2:	e013      	b.n	80a10cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a10a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a10a8:	a905      	add	r1, sp, #20
 80a10aa:	a803      	add	r0, sp, #12
 80a10ac:	9205      	str	r2, [sp, #20]
 80a10ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a10b2:	f7ff fefd 	bl	80a0eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a10b6:	a805      	add	r0, sp, #20
 80a10b8:	f7ff fe30 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a10bc:	a805      	add	r0, sp, #20
 80a10be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a10c0:	f7ff fe84 	bl	80a0dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a10c4:	a806      	add	r0, sp, #24
 80a10c6:	f7ff fe53 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10ca:	e7da      	b.n	80a1082 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a10cc:	4630      	mov	r0, r6
 80a10ce:	b00b      	add	sp, #44	; 0x2c
 80a10d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10d4:	080a1249 	.word	0x080a1249

080a10d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a10da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10de:	d006      	beq.n	80a10ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a10e0:	2a03      	cmp	r2, #3
 80a10e2:	d017      	beq.n	80a1114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a10e4:	2a01      	cmp	r2, #1
 80a10e6:	d122      	bne.n	80a112e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a10e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a10ea:	6003      	str	r3, [r0, #0]
	      break;
 80a10ec:	e01f      	b.n	80a112e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10ee:	2018      	movs	r0, #24
 80a10f0:	680e      	ldr	r6, [r1, #0]
 80a10f2:	f7fe ffd2 	bl	80a009a <_Znwj>
 80a10f6:	4605      	mov	r5, r0
 80a10f8:	b150      	cbz	r0, 80a1110 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a10fa:	4631      	mov	r1, r6
 80a10fc:	f7ff fec8 	bl	80a0e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1100:	6930      	ldr	r0, [r6, #16]
 80a1102:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1106:	b108      	cbz	r0, 80a110c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1108:	f001 fdfa 	bl	80a2d00 <strdup>
 80a110c:	6128      	str	r0, [r5, #16]
 80a110e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1110:	6025      	str	r5, [r4, #0]
 80a1112:	e00c      	b.n	80a112e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1114:	6804      	ldr	r4, [r0, #0]
 80a1116:	b154      	cbz	r4, 80a112e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1118:	f104 0010 	add.w	r0, r4, #16
 80a111c:	f7ff fdfe 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1120:	4620      	mov	r0, r4
 80a1122:	f7ff fde3 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1126:	2118      	movs	r1, #24
 80a1128:	4620      	mov	r0, r4
 80a112a:	f000 febc 	bl	80a1ea6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a112e:	2000      	movs	r0, #0
 80a1130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1132 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1132:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1134:	2300      	movs	r3, #0
 80a1136:	6083      	str	r3, [r0, #8]
 80a1138:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a113a:	4604      	mov	r4, r0
 80a113c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a113e:	b12b      	cbz	r3, 80a114c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1140:	2202      	movs	r2, #2
 80a1142:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1144:	68eb      	ldr	r3, [r5, #12]
 80a1146:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1148:	68ab      	ldr	r3, [r5, #8]
 80a114a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a114c:	4620      	mov	r0, r4
 80a114e:	bd38      	pop	{r3, r4, r5, pc}

080a1150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1150:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1152:	b570      	push	{r4, r5, r6, lr}
 80a1154:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1156:	d006      	beq.n	80a1166 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1158:	2a03      	cmp	r2, #3
 80a115a:	d011      	beq.n	80a1180 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a115c:	2a01      	cmp	r2, #1
 80a115e:	d118      	bne.n	80a1192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1160:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1162:	6003      	str	r3, [r0, #0]
	      break;
 80a1164:	e015      	b.n	80a1192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1166:	2014      	movs	r0, #20
 80a1168:	680e      	ldr	r6, [r1, #0]
 80a116a:	f7fe ff96 	bl	80a009a <_Znwj>
 80a116e:	4605      	mov	r5, r0
 80a1170:	b120      	cbz	r0, 80a117c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1172:	4631      	mov	r1, r6
 80a1174:	f7ff ffdd 	bl	80a1132 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1178:	7c33      	ldrb	r3, [r6, #16]
 80a117a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a117c:	6025      	str	r5, [r4, #0]
 80a117e:	e008      	b.n	80a1192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1180:	6804      	ldr	r4, [r0, #0]
 80a1182:	b134      	cbz	r4, 80a1192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1184:	4620      	mov	r0, r4
 80a1186:	f7ff fdb1 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a118a:	2114      	movs	r1, #20
 80a118c:	4620      	mov	r0, r4
 80a118e:	f000 fe8a 	bl	80a1ea6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1192:	2000      	movs	r0, #0
 80a1194:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1198:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a119a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a119c:	f3bf 8f5f 	dmb	sy
 80a11a0:	b087      	sub	sp, #28
 80a11a2:	2300      	movs	r3, #0
 80a11a4:	e850 6f00 	ldrex	r6, [r0]
 80a11a8:	e840 3200 	strex	r2, r3, [r0]
 80a11ac:	2a00      	cmp	r2, #0
 80a11ae:	d1f9      	bne.n	80a11a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a11b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a11b4:	2e00      	cmp	r6, #0
 80a11b6:	d03f      	beq.n	80a1238 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a11b8:	4618      	mov	r0, r3
 80a11ba:	f7ff fcb5 	bl	80a0b28 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a11be:	4607      	mov	r7, r0
 80a11c0:	b120      	cbz	r0, 80a11cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a11c2:	4621      	mov	r1, r4
 80a11c4:	4630      	mov	r0, r6
 80a11c6:	f7ff fe53 	bl	80a0e70 <_ZNKSt8functionIFvRKbEEclES1_>
 80a11ca:	e02e      	b.n	80a122a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11cc:	4631      	mov	r1, r6
 80a11ce:	a801      	add	r0, sp, #4
 80a11d0:	f7ff ffaf 	bl	80a1132 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11d4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11d6:	2010      	movs	r0, #16
 80a11d8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a11dc:	f7fe ff5d 	bl	80a009a <_Znwj>
 80a11e0:	4605      	mov	r5, r0
 80a11e2:	b1d0      	cbz	r0, 80a121a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11e6:	2014      	movs	r0, #20
 80a11e8:	f7fe ff57 	bl	80a009a <_Znwj>
 80a11ec:	4604      	mov	r4, r0
 80a11ee:	b178      	cbz	r0, 80a1210 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11f2:	4601      	mov	r1, r0
 80a11f4:	a801      	add	r0, sp, #4
 80a11f6:	f7ff fe07 	bl	80a0e08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a11fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1200:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1202:	9203      	str	r2, [sp, #12]
 80a1204:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1206:	60e3      	str	r3, [r4, #12]
 80a1208:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a120c:	9204      	str	r2, [sp, #16]
 80a120e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1210:	4b0a      	ldr	r3, [pc, #40]	; (80a123c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1212:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1214:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1216:	4b0a      	ldr	r3, [pc, #40]	; (80a1240 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1218:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a121a:	a801      	add	r0, sp, #4
 80a121c:	f7ff fd66 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1220:	2200      	movs	r2, #0
 80a1222:	4629      	mov	r1, r5
 80a1224:	4807      	ldr	r0, [pc, #28]	; (80a1244 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1226:	f7ff fc87 	bl	80a0b38 <application_thread_invoke>
 80a122a:	4630      	mov	r0, r6
 80a122c:	f7ff fd5e 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1230:	2110      	movs	r1, #16
 80a1232:	4630      	mov	r0, r6
 80a1234:	f000 fe37 	bl	80a1ea6 <_ZdlPvj>
        }
    }
 80a1238:	b007      	add	sp, #28
 80a123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a123c:	080a0e83 	.word	0x080a0e83
 80a1240:	080a1151 	.word	0x080a1151
 80a1244:	080a0ca7 	.word	0x080a0ca7

080a1248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1248:	b530      	push	{r4, r5, lr}
 80a124a:	4604      	mov	r4, r0
 80a124c:	b085      	sub	sp, #20
 80a124e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1250:	4668      	mov	r0, sp
 80a1252:	4611      	mov	r1, r2
 80a1254:	f7ff fdba 	bl	80a0dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1258:	b17c      	cbz	r4, 80a127a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a125a:	b224      	sxth	r4, r4
 80a125c:	4628      	mov	r0, r5
 80a125e:	b10d      	cbz	r5, 80a1264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1260:	f001 fd4e 	bl	80a2d00 <strdup>
 80a1264:	9002      	str	r0, [sp, #8]
 80a1266:	a902      	add	r1, sp, #8
 80a1268:	4668      	mov	r0, sp
 80a126a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a126e:	f7ff fe1f 	bl	80a0eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1272:	a802      	add	r0, sp, #8
 80a1274:	f7ff fd52 	bl	80a0d1c <_ZN8particle5ErrorD1Ev>
 80a1278:	e01d      	b.n	80a12b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a127a:	f04f 0201 	mov.w	r2, #1
 80a127e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1280:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1284:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1288:	42a3      	cmp	r3, r4
 80a128a:	d103      	bne.n	80a1294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a128c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1290:	2900      	cmp	r1, #0
 80a1292:	d1f7      	bne.n	80a1284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1294:	d002      	beq.n	80a129c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1296:	f88d 3008 	strb.w	r3, [sp, #8]
 80a129a:	e00c      	b.n	80a12b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a129c:	f110 010c 	adds.w	r1, r0, #12
 80a12a0:	f04f 0301 	mov.w	r3, #1
 80a12a4:	bf18      	it	ne
 80a12a6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a12a8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a12ac:	3004      	adds	r0, #4
 80a12ae:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a12b2:	f7ff ff71 	bl	80a1198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a12b6:	a801      	add	r0, sp, #4
 80a12b8:	f7ff fd5a 	bl	80a0d70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a12bc:	b005      	add	sp, #20
 80a12be:	bd30      	pop	{r4, r5, pc}

080a12c0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a12c0:	4770      	bx	lr

080a12c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a12c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12c4:	4606      	mov	r6, r0
 80a12c6:	4615      	mov	r5, r2
 80a12c8:	460c      	mov	r4, r1
 80a12ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a12cc:	42bc      	cmp	r4, r7
 80a12ce:	d006      	beq.n	80a12de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a12d0:	6833      	ldr	r3, [r6, #0]
 80a12d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a12d6:	689b      	ldr	r3, [r3, #8]
 80a12d8:	4630      	mov	r0, r6
 80a12da:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a12dc:	e7f6      	b.n	80a12cc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a12de:	4628      	mov	r0, r5
 80a12e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12e2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a12e2:	2200      	movs	r2, #0
 80a12e4:	7c00      	ldrb	r0, [r0, #16]
 80a12e6:	f7ff bb5d 	b.w	80a09a4 <HAL_I2C_Write_Data>

080a12ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a12ea:	2100      	movs	r1, #0
 80a12ec:	7c00      	ldrb	r0, [r0, #16]
 80a12ee:	f7ff bb61 	b.w	80a09b4 <HAL_I2C_Available_Data>

080a12f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a12f2:	2100      	movs	r1, #0
 80a12f4:	7c00      	ldrb	r0, [r0, #16]
 80a12f6:	f7ff bb65 	b.w	80a09c4 <HAL_I2C_Read_Data>

080a12fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a12fa:	2100      	movs	r1, #0
 80a12fc:	7c00      	ldrb	r0, [r0, #16]
 80a12fe:	f7ff bb69 	b.w	80a09d4 <HAL_I2C_Peek_Data>

080a1302 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1302:	2100      	movs	r1, #0
 80a1304:	7c00      	ldrb	r0, [r0, #16]
 80a1306:	f7ff bb6d 	b.w	80a09e4 <HAL_I2C_Flush_Data>

080a130a <_ZN7TwoWireD0Ev>:
 80a130a:	b510      	push	{r4, lr}
 80a130c:	4604      	mov	r4, r0
 80a130e:	2114      	movs	r1, #20
 80a1310:	f000 fdc9 	bl	80a1ea6 <_ZdlPvj>
 80a1314:	4620      	mov	r0, r4
 80a1316:	bd10      	pop	{r4, pc}

080a1318 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1318:	b510      	push	{r4, lr}
 80a131a:	4604      	mov	r4, r0
 80a131c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1322:	60a3      	str	r3, [r4, #8]
 80a1324:	4b04      	ldr	r3, [pc, #16]	; (80a1338 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1326:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1328:	7420      	strb	r0, [r4, #16]
 80a132a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a132c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a132e:	f7ff fb61 	bl	80a09f4 <HAL_I2C_Init>

}
 80a1332:	4620      	mov	r0, r4
 80a1334:	bd10      	pop	{r4, pc}
 80a1336:	bf00      	nop
 80a1338:	080a2e50 	.word	0x080a2e50

080a133c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a133c:	2200      	movs	r2, #0
 80a133e:	7c00      	ldrb	r0, [r0, #16]
 80a1340:	f7ff bb08 	b.w	80a0954 <HAL_I2C_Set_Speed>

080a1344 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1344:	2300      	movs	r3, #0
 80a1346:	461a      	mov	r2, r3
 80a1348:	4619      	mov	r1, r3
 80a134a:	7c00      	ldrb	r0, [r0, #16]
 80a134c:	f7ff bb0a 	b.w	80a0964 <HAL_I2C_Begin>

080a1350 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1350:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1352:	2400      	movs	r4, #0
 80a1354:	7c00      	ldrb	r0, [r0, #16]
 80a1356:	9400      	str	r4, [sp, #0]
 80a1358:	f7ff fb0c 	bl	80a0974 <HAL_I2C_Request_Data>
  return result;
}
 80a135c:	b2c0      	uxtb	r0, r0
 80a135e:	b002      	add	sp, #8
 80a1360:	bd10      	pop	{r4, pc}

080a1362 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1362:	2301      	movs	r3, #1
 80a1364:	f7ff bff4 	b.w	80a1350 <_ZN7TwoWire11requestFromEhhh>

080a1368 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1368:	2301      	movs	r3, #1
 80a136a:	b2d2      	uxtb	r2, r2
 80a136c:	b2c9      	uxtb	r1, r1
 80a136e:	f7ff bfef 	b.w	80a1350 <_ZN7TwoWire11requestFromEhhh>

080a1372 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1372:	2200      	movs	r2, #0
 80a1374:	7c00      	ldrb	r0, [r0, #16]
 80a1376:	f7ff bb05 	b.w	80a0984 <HAL_I2C_Begin_Transmission>

080a137a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a137a:	b2c9      	uxtb	r1, r1
 80a137c:	f7ff bff9 	b.w	80a1372 <_ZN7TwoWire17beginTransmissionEh>

080a1380 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1380:	2200      	movs	r2, #0
 80a1382:	7c00      	ldrb	r0, [r0, #16]
 80a1384:	f7ff bb06 	b.w	80a0994 <HAL_I2C_End_Transmission>

080a1388 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1388:	2101      	movs	r1, #1
 80a138a:	f7ff bff9 	b.w	80a1380 <_ZN7TwoWire15endTransmissionEh>

080a138e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a138e:	4770      	bx	lr

080a1390 <_ZN9IPAddressD0Ev>:
 80a1390:	b510      	push	{r4, lr}
 80a1392:	4604      	mov	r4, r0
 80a1394:	2118      	movs	r1, #24
 80a1396:	f000 fd86 	bl	80a1ea6 <_ZdlPvj>
 80a139a:	4620      	mov	r0, r4
 80a139c:	bd10      	pop	{r4, pc}

080a139e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a139e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13a0:	460f      	mov	r7, r1
 80a13a2:	f100 0608 	add.w	r6, r0, #8
 80a13a6:	1d05      	adds	r5, r0, #4
 80a13a8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a13aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a13ae:	220a      	movs	r2, #10
 80a13b0:	4638      	mov	r0, r7
 80a13b2:	f000 f92a 	bl	80a160a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a13b6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a13b8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a13ba:	d007      	beq.n	80a13cc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a13bc:	2c00      	cmp	r4, #0
 80a13be:	d0f4      	beq.n	80a13aa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a13c0:	212e      	movs	r1, #46	; 0x2e
 80a13c2:	4638      	mov	r0, r7
 80a13c4:	f000 f8de 	bl	80a1584 <_ZN5Print5printEc>
 80a13c8:	4404      	add	r4, r0
 80a13ca:	e7ee      	b.n	80a13aa <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a13d0:	b510      	push	{r4, lr}
 80a13d2:	4604      	mov	r4, r0
 80a13d4:	4b04      	ldr	r3, [pc, #16]	; (80a13e8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a13d6:	2211      	movs	r2, #17
 80a13d8:	f840 3b04 	str.w	r3, [r0], #4
 80a13dc:	2100      	movs	r1, #0
 80a13de:	f001 fc5e 	bl	80a2c9e <memset>
{
    clear();
}
 80a13e2:	4620      	mov	r0, r4
 80a13e4:	bd10      	pop	{r4, pc}
 80a13e6:	bf00      	nop
 80a13e8:	080a2e78 	.word	0x080a2e78

080a13ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a13ec:	4603      	mov	r3, r0
 80a13ee:	4a07      	ldr	r2, [pc, #28]	; (80a140c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a13f0:	b510      	push	{r4, lr}
 80a13f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a13f6:	f101 0210 	add.w	r2, r1, #16
 80a13fa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a13fe:	4291      	cmp	r1, r2
 80a1400:	f843 4b04 	str.w	r4, [r3], #4
 80a1404:	d1f9      	bne.n	80a13fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1406:	780a      	ldrb	r2, [r1, #0]
 80a1408:	701a      	strb	r2, [r3, #0]
}
 80a140a:	bd10      	pop	{r4, pc}
 80a140c:	080a2e78 	.word	0x080a2e78

080a1410 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1410:	4a02      	ldr	r2, [pc, #8]	; (80a141c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1412:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1414:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1416:	2204      	movs	r2, #4
 80a1418:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a141a:	4770      	bx	lr
 80a141c:	080a2e78 	.word	0x080a2e78

080a1420 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1420:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1422:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1426:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a142a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a142e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1432:	2304      	movs	r3, #4
 80a1434:	6041      	str	r1, [r0, #4]
 80a1436:	7503      	strb	r3, [r0, #20]
 80a1438:	bd10      	pop	{r4, pc}
	...

080a143c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a143c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a143e:	4d04      	ldr	r5, [pc, #16]	; (80a1450 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1440:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1442:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1446:	9500      	str	r5, [sp, #0]
 80a1448:	f7ff ffea 	bl	80a1420 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a144c:	b003      	add	sp, #12
 80a144e:	bd30      	pop	{r4, r5, pc}
 80a1450:	080a2e78 	.word	0x080a2e78

080a1454 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1454:	4a01      	ldr	r2, [pc, #4]	; (80a145c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1458:	601a      	str	r2, [r3, #0]
 80a145a:	4770      	bx	lr
 80a145c:	080a2efa 	.word	0x080a2efa
 80a1460:	20000118 	.word	0x20000118

080a1464 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1464:	2300      	movs	r3, #0
 80a1466:	461a      	mov	r2, r3
 80a1468:	6840      	ldr	r0, [r0, #4]
 80a146a:	f7ff bb99 	b.w	80a0ba0 <network_connect>

080a146e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a146e:	2200      	movs	r2, #0
 80a1470:	2102      	movs	r1, #2
 80a1472:	6840      	ldr	r0, [r0, #4]
 80a1474:	f7ff bba4 	b.w	80a0bc0 <network_disconnect>

080a1478 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1478:	2200      	movs	r2, #0
 80a147a:	4611      	mov	r1, r2
 80a147c:	6840      	ldr	r0, [r0, #4]
 80a147e:	f7ff bb97 	b.w	80a0bb0 <network_connecting>

080a1482 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1482:	2200      	movs	r2, #0
 80a1484:	4611      	mov	r1, r2
 80a1486:	6840      	ldr	r0, [r0, #4]
 80a1488:	f7ff bba2 	b.w	80a0bd0 <network_ready>

080a148c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a148c:	2300      	movs	r3, #0
 80a148e:	461a      	mov	r2, r3
 80a1490:	4619      	mov	r1, r3
 80a1492:	6840      	ldr	r0, [r0, #4]
 80a1494:	f7ff bba4 	b.w	80a0be0 <network_on>

080a1498 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1498:	2300      	movs	r3, #0
 80a149a:	461a      	mov	r2, r3
 80a149c:	4619      	mov	r1, r3
 80a149e:	6840      	ldr	r0, [r0, #4]
 80a14a0:	f7ff bba6 	b.w	80a0bf0 <network_off>

080a14a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a14a4:	2200      	movs	r2, #0
 80a14a6:	f081 0101 	eor.w	r1, r1, #1
 80a14aa:	6840      	ldr	r0, [r0, #4]
 80a14ac:	f7ff bba8 	b.w	80a0c00 <network_listen>

080a14b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a14b0:	2200      	movs	r2, #0
 80a14b2:	6840      	ldr	r0, [r0, #4]
 80a14b4:	f7ff bbb4 	b.w	80a0c20 <network_set_listen_timeout>

080a14b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a14b8:	2200      	movs	r2, #0
 80a14ba:	4611      	mov	r1, r2
 80a14bc:	6840      	ldr	r0, [r0, #4]
 80a14be:	f7ff bbb7 	b.w	80a0c30 <network_get_listen_timeout>

080a14c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a14c2:	2200      	movs	r2, #0
 80a14c4:	4611      	mov	r1, r2
 80a14c6:	6840      	ldr	r0, [r0, #4]
 80a14c8:	f7ff bba2 	b.w	80a0c10 <network_listening>

080a14cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a14cc:	b570      	push	{r4, r5, r6, lr}
 80a14ce:	4616      	mov	r6, r2
 80a14d0:	b08e      	sub	sp, #56	; 0x38
 80a14d2:	4604      	mov	r4, r0
    IPAddress addr;
 80a14d4:	a808      	add	r0, sp, #32
 80a14d6:	f7ff ff7b 	bl	80a13d0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a14da:	2211      	movs	r2, #17
 80a14dc:	2100      	movs	r1, #0
 80a14de:	a803      	add	r0, sp, #12
 80a14e0:	f001 fbdd 	bl	80a2c9e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a14e4:	4630      	mov	r0, r6
 80a14e6:	f001 fc26 	bl	80a2d36 <strlen>
 80a14ea:	2500      	movs	r5, #0
 80a14ec:	4b0a      	ldr	r3, [pc, #40]	; (80a1518 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a14ee:	9500      	str	r5, [sp, #0]
 80a14f0:	b281      	uxth	r1, r0
 80a14f2:	685b      	ldr	r3, [r3, #4]
 80a14f4:	aa03      	add	r2, sp, #12
 80a14f6:	4630      	mov	r0, r6
 80a14f8:	f7ff fafe 	bl	80a0af8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a14fc:	b120      	cbz	r0, 80a1508 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a14fe:	4629      	mov	r1, r5
 80a1500:	4620      	mov	r0, r4
 80a1502:	f7ff ff85 	bl	80a1410 <_ZN9IPAddressC1Em>
 80a1506:	e003      	b.n	80a1510 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1508:	a903      	add	r1, sp, #12
 80a150a:	4620      	mov	r0, r4
 80a150c:	f7ff ff6e 	bl	80a13ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1510:	4620      	mov	r0, r4
 80a1512:	b00e      	add	sp, #56	; 0x38
 80a1514:	bd70      	pop	{r4, r5, r6, pc}
 80a1516:	bf00      	nop
 80a1518:	2000059c 	.word	0x2000059c

080a151c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a151c:	4b02      	ldr	r3, [pc, #8]	; (80a1528 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a151e:	4a03      	ldr	r2, [pc, #12]	; (80a152c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1520:	601a      	str	r2, [r3, #0]
 80a1522:	2200      	movs	r2, #0
 80a1524:	605a      	str	r2, [r3, #4]
 80a1526:	4770      	bx	lr
 80a1528:	2000011c 	.word	0x2000011c
 80a152c:	080a2f6c 	.word	0x080a2f6c

080a1530 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1532:	4606      	mov	r6, r0
 80a1534:	460d      	mov	r5, r1
 80a1536:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1538:	2400      	movs	r4, #0
  while (size--) {
 80a153a:	42bd      	cmp	r5, r7
 80a153c:	d00c      	beq.n	80a1558 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a153e:	6833      	ldr	r3, [r6, #0]
 80a1540:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1544:	689b      	ldr	r3, [r3, #8]
 80a1546:	4630      	mov	r0, r6
 80a1548:	4798      	blx	r3
     if (chunk>=0)
 80a154a:	2800      	cmp	r0, #0
 80a154c:	db01      	blt.n	80a1552 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a154e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1550:	e7f3      	b.n	80a153a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1552:	2c00      	cmp	r4, #0
 80a1554:	bf08      	it	eq
 80a1556:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1558:	4620      	mov	r0, r4
 80a155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a155c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a155c:	b570      	push	{r4, r5, r6, lr}
 80a155e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1560:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1562:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1564:	b149      	cbz	r1, 80a157a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1566:	f001 fbe6 	bl	80a2d36 <strlen>
 80a156a:	682b      	ldr	r3, [r5, #0]
 80a156c:	4602      	mov	r2, r0
 80a156e:	4621      	mov	r1, r4
 80a1570:	4628      	mov	r0, r5
    }
 80a1572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1576:	68db      	ldr	r3, [r3, #12]
 80a1578:	4718      	bx	r3
    }
 80a157a:	bd70      	pop	{r4, r5, r6, pc}

080a157c <_ZN5Print5printEPKc>:
 80a157c:	b508      	push	{r3, lr}
 80a157e:	f7ff ffed 	bl	80a155c <_ZN5Print5writeEPKc>
 80a1582:	bd08      	pop	{r3, pc}

080a1584 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1584:	6803      	ldr	r3, [r0, #0]
 80a1586:	689b      	ldr	r3, [r3, #8]
 80a1588:	4718      	bx	r3

080a158a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a158a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a158c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a158e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1590:	f7ff fff8 	bl	80a1584 <_ZN5Print5printEc>
  n += print('\n');
 80a1594:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1596:	4604      	mov	r4, r0
  n += print('\n');
 80a1598:	4628      	mov	r0, r5
 80a159a:	f7ff fff3 	bl	80a1584 <_ZN5Print5printEc>
  return n;
}
 80a159e:	4420      	add	r0, r4
 80a15a0:	bd38      	pop	{r3, r4, r5, pc}

080a15a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a15a2:	b538      	push	{r3, r4, r5, lr}
 80a15a4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a15a6:	f7ff ffd9 	bl	80a155c <_ZN5Print5writeEPKc>
 80a15aa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a15ac:	4628      	mov	r0, r5
 80a15ae:	f7ff ffec 	bl	80a158a <_ZN5Print7printlnEv>
  return n;
}
 80a15b2:	4420      	add	r0, r4
 80a15b4:	bd38      	pop	{r3, r4, r5, pc}

080a15b6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a15b6:	2a01      	cmp	r2, #1
 80a15b8:	bf98      	it	ls
 80a15ba:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a15bc:	b530      	push	{r4, r5, lr}
 80a15be:	460b      	mov	r3, r1
 80a15c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a15c2:	2100      	movs	r1, #0
 80a15c4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a15c8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a15cc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a15d0:	fb05 3312 	mls	r3, r5, r2, r3
 80a15d4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a15d6:	2b09      	cmp	r3, #9
 80a15d8:	bf94      	ite	ls
 80a15da:	3330      	addls	r3, #48	; 0x30
 80a15dc:	3337      	addhi	r3, #55	; 0x37
 80a15de:	b2db      	uxtb	r3, r3
 80a15e0:	4621      	mov	r1, r4
 80a15e2:	f804 3901 	strb.w	r3, [r4], #-1
 80a15e6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a15e8:	2d00      	cmp	r5, #0
 80a15ea:	d1ef      	bne.n	80a15cc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a15ec:	f7ff ffb6 	bl	80a155c <_ZN5Print5writeEPKc>
}
 80a15f0:	b00b      	add	sp, #44	; 0x2c
 80a15f2:	bd30      	pop	{r4, r5, pc}

080a15f4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a15f4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a15f6:	b922      	cbnz	r2, 80a1602 <_ZN5Print5printEmi+0xe>
 80a15f8:	6803      	ldr	r3, [r0, #0]
 80a15fa:	b2c9      	uxtb	r1, r1
 80a15fc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a15fe:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1600:	4718      	bx	r3
  else return printNumber(n, base);
 80a1602:	b2d2      	uxtb	r2, r2
}
 80a1604:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1606:	f7ff bfd6 	b.w	80a15b6 <_ZN5Print11printNumberEmh>

080a160a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a160a:	f7ff bff3 	b.w	80a15f4 <_ZN5Print5printEmi>

080a160e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a160e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1612:	4607      	mov	r7, r0
 80a1614:	460e      	mov	r6, r1
  if (base == 0) {
 80a1616:	4615      	mov	r5, r2
 80a1618:	b92a      	cbnz	r2, 80a1626 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a161a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a161e:	6803      	ldr	r3, [r0, #0]
 80a1620:	b2c9      	uxtb	r1, r1
 80a1622:	689b      	ldr	r3, [r3, #8]
 80a1624:	4718      	bx	r3
  } else if (base == 10) {
 80a1626:	2a0a      	cmp	r2, #10
 80a1628:	d102      	bne.n	80a1630 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a162a:	2900      	cmp	r1, #0
 80a162c:	da01      	bge.n	80a1632 <_ZN5Print5printEli+0x24>
 80a162e:	e004      	b.n	80a163a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1630:	b2d2      	uxtb	r2, r2
  }
}
 80a1632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1636:	f7ff bfbe 	b.w	80a15b6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a163a:	212d      	movs	r1, #45	; 0x2d
 80a163c:	f7ff ffa2 	bl	80a1584 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1640:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1642:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1644:	4271      	negs	r1, r6
 80a1646:	4638      	mov	r0, r7
 80a1648:	f7ff ffb5 	bl	80a15b6 <_ZN5Print11printNumberEmh>
 80a164c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1652 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1652:	f7ff bfdc 	b.w	80a160e <_ZN5Print5printEli>
	...

080a1658 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a165c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a165e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1660:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1662:	4617      	mov	r7, r2
 80a1664:	461e      	mov	r6, r3
 80a1666:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a166a:	f001 f9bb 	bl	80a29e4 <__aeabi_dcmpun>
 80a166e:	b108      	cbz	r0, 80a1674 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1670:	4947      	ldr	r1, [pc, #284]	; (80a1790 <_ZN5Print10printFloatEdh+0x138>)
 80a1672:	e012      	b.n	80a169a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1674:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a167c:	4b45      	ldr	r3, [pc, #276]	; (80a1794 <_ZN5Print10printFloatEdh+0x13c>)
 80a167e:	4638      	mov	r0, r7
 80a1680:	4621      	mov	r1, r4
 80a1682:	f001 f9af 	bl	80a29e4 <__aeabi_dcmpun>
 80a1686:	b968      	cbnz	r0, 80a16a4 <_ZN5Print10printFloatEdh+0x4c>
 80a1688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a168c:	4b41      	ldr	r3, [pc, #260]	; (80a1794 <_ZN5Print10printFloatEdh+0x13c>)
 80a168e:	4638      	mov	r0, r7
 80a1690:	4621      	mov	r1, r4
 80a1692:	f001 f989 	bl	80a29a8 <__aeabi_dcmple>
 80a1696:	b928      	cbnz	r0, 80a16a4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1698:	493f      	ldr	r1, [pc, #252]	; (80a1798 <_ZN5Print10printFloatEdh+0x140>)
 80a169a:	4640      	mov	r0, r8
 80a169c:	f7ff ff5e 	bl	80a155c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a16a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a16a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a16a8:	4b3c      	ldr	r3, [pc, #240]	; (80a179c <_ZN5Print10printFloatEdh+0x144>)
 80a16aa:	4638      	mov	r0, r7
 80a16ac:	4631      	mov	r1, r6
 80a16ae:	f001 f98f 	bl	80a29d0 <__aeabi_dcmpgt>
 80a16b2:	b108      	cbz	r0, 80a16b8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a16b4:	493a      	ldr	r1, [pc, #232]	; (80a17a0 <_ZN5Print10printFloatEdh+0x148>)
 80a16b6:	e7f0      	b.n	80a169a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a16b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a16bc:	4b39      	ldr	r3, [pc, #228]	; (80a17a4 <_ZN5Print10printFloatEdh+0x14c>)
 80a16be:	4638      	mov	r0, r7
 80a16c0:	4631      	mov	r1, r6
 80a16c2:	f001 f967 	bl	80a2994 <__aeabi_dcmplt>
 80a16c6:	2800      	cmp	r0, #0
 80a16c8:	d1f4      	bne.n	80a16b4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a16ca:	2200      	movs	r2, #0
 80a16cc:	2300      	movs	r3, #0
 80a16ce:	4638      	mov	r0, r7
 80a16d0:	4631      	mov	r1, r6
 80a16d2:	f001 f95f 	bl	80a2994 <__aeabi_dcmplt>
 80a16d6:	b138      	cbz	r0, 80a16e8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a16d8:	212d      	movs	r1, #45	; 0x2d
 80a16da:	4640      	mov	r0, r8
 80a16dc:	f7ff ff52 	bl	80a1584 <_ZN5Print5printEc>
     number = -number;
 80a16e0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a16e4:	4604      	mov	r4, r0
 80a16e6:	e000      	b.n	80a16ea <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a16e8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a16ea:	492f      	ldr	r1, [pc, #188]	; (80a17a8 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a16ec:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a16f0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a16f2:	fa5f f389 	uxtb.w	r3, r9
 80a16f6:	429d      	cmp	r5, r3
 80a16f8:	d906      	bls.n	80a1708 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a16fa:	2200      	movs	r2, #0
 80a16fc:	4b2b      	ldr	r3, [pc, #172]	; (80a17ac <_ZN5Print10printFloatEdh+0x154>)
 80a16fe:	f001 f801 	bl	80a2704 <__aeabi_ddiv>
 80a1702:	f109 0901 	add.w	r9, r9, #1
 80a1706:	e7f4      	b.n	80a16f2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1708:	463a      	mov	r2, r7
 80a170a:	4633      	mov	r3, r6
 80a170c:	f000 fd1e 	bl	80a214c <__adddf3>
 80a1710:	460f      	mov	r7, r1
 80a1712:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1714:	f001 f9a4 	bl	80a2a60 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1718:	220a      	movs	r2, #10
 80a171a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a171c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a171e:	4640      	mov	r0, r8
 80a1720:	f7ff ff49 	bl	80a15b6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1724:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1726:	b37d      	cbz	r5, 80a1788 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1728:	4648      	mov	r0, r9
 80a172a:	f000 fe4b 	bl	80a23c4 <__aeabi_ui2d>
 80a172e:	4602      	mov	r2, r0
 80a1730:	460b      	mov	r3, r1
 80a1732:	4630      	mov	r0, r6
 80a1734:	4639      	mov	r1, r7
 80a1736:	f000 fd07 	bl	80a2148 <__aeabi_dsub>
 80a173a:	4606      	mov	r6, r0
 80a173c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a173e:	4640      	mov	r0, r8
 80a1740:	491b      	ldr	r1, [pc, #108]	; (80a17b0 <_ZN5Print10printFloatEdh+0x158>)
 80a1742:	f7ff ff0b 	bl	80a155c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1746:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1748:	4b18      	ldr	r3, [pc, #96]	; (80a17ac <_ZN5Print10printFloatEdh+0x154>)
 80a174a:	2200      	movs	r2, #0
 80a174c:	4630      	mov	r0, r6
 80a174e:	4639      	mov	r1, r7
 80a1750:	f000 feae 	bl	80a24b0 <__aeabi_dmul>
 80a1754:	460f      	mov	r7, r1
 80a1756:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1758:	f001 f95a 	bl	80a2a10 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a175c:	220a      	movs	r2, #10
 80a175e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1760:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1762:	4640      	mov	r0, r8
 80a1764:	f7ff ff53 	bl	80a160e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1768:	4404      	add	r4, r0
    remainder -= toPrint;
 80a176a:	4648      	mov	r0, r9
 80a176c:	f000 fe3a 	bl	80a23e4 <__aeabi_i2d>
 80a1770:	4602      	mov	r2, r0
 80a1772:	460b      	mov	r3, r1
 80a1774:	4630      	mov	r0, r6
 80a1776:	4639      	mov	r1, r7
 80a1778:	f000 fce6 	bl	80a2148 <__aeabi_dsub>
 80a177c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a177e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1782:	4606      	mov	r6, r0
 80a1784:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1786:	d1df      	bne.n	80a1748 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1788:	4620      	mov	r0, r4
 80a178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a178e:	bf00      	nop
 80a1790:	080a2f98 	.word	0x080a2f98
 80a1794:	7fefffff 	.word	0x7fefffff
 80a1798:	080a2fa0 	.word	0x080a2fa0
 80a179c:	41efffff 	.word	0x41efffff
 80a17a0:	080a2f9c 	.word	0x080a2f9c
 80a17a4:	c1efffff 	.word	0xc1efffff
 80a17a8:	3fe00000 	.word	0x3fe00000
 80a17ac:	40240000 	.word	0x40240000
 80a17b0:	080a2d6a 	.word	0x080a2d6a

080a17b4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a17b4:	f89d 1000 	ldrb.w	r1, [sp]
 80a17b8:	9100      	str	r1, [sp, #0]
 80a17ba:	f7ff bf4d 	b.w	80a1658 <_ZN5Print10printFloatEdh>

080a17be <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a17be:	b510      	push	{r4, lr}
 80a17c0:	4604      	mov	r4, r0
 80a17c2:	f7ff fa93 	bl	80a0cec <_ZNSt14_Function_baseD1Ev>
 80a17c6:	4620      	mov	r0, r4
 80a17c8:	bd10      	pop	{r4, pc}
	...

080a17cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a17cc:	4803      	ldr	r0, [pc, #12]	; (80a17dc <_GLOBAL__sub_I_RGB+0x10>)
 80a17ce:	2300      	movs	r3, #0
 80a17d0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a17d2:	4a03      	ldr	r2, [pc, #12]	; (80a17e0 <_GLOBAL__sub_I_RGB+0x14>)
 80a17d4:	4903      	ldr	r1, [pc, #12]	; (80a17e4 <_GLOBAL__sub_I_RGB+0x18>)
 80a17d6:	f000 bb61 	b.w	80a1e9c <__aeabi_atexit>
 80a17da:	bf00      	nop
 80a17dc:	20000124 	.word	0x20000124
 80a17e0:	2000006c 	.word	0x2000006c
 80a17e4:	080a17bf 	.word	0x080a17bf

080a17e8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a17e8:	4770      	bx	lr

080a17ea <_ZN8SPIClassD0Ev>:
 80a17ea:	b510      	push	{r4, lr}
 80a17ec:	4604      	mov	r4, r0
 80a17ee:	2110      	movs	r1, #16
 80a17f0:	f000 fb59 	bl	80a1ea6 <_ZdlPvj>
 80a17f4:	4620      	mov	r0, r4
 80a17f6:	bd10      	pop	{r4, pc}

080a17f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a17f8:	b570      	push	{r4, r5, r6, lr}
 80a17fa:	4604      	mov	r4, r0
 80a17fc:	460e      	mov	r6, r1
 80a17fe:	4b07      	ldr	r3, [pc, #28]	; (80a181c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1800:	2500      	movs	r5, #0
 80a1802:	6003      	str	r3, [r0, #0]
 80a1804:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1808:	f7ff f884 	bl	80a0914 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a180c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a180e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1810:	f7ff f8fa 	bl	80a0a08 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1814:	60a5      	str	r5, [r4, #8]
}
 80a1816:	4620      	mov	r0, r4
 80a1818:	bd70      	pop	{r4, r5, r6, pc}
 80a181a:	bf00      	nop
 80a181c:	080a2fac 	.word	0x080a2fac

080a1820 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1820:	b510      	push	{r4, lr}
 80a1822:	4604      	mov	r4, r0
{
	free(buffer);
 80a1824:	6800      	ldr	r0, [r0, #0]
 80a1826:	f7ff fa13 	bl	80a0c50 <free>
}
 80a182a:	4620      	mov	r0, r4
 80a182c:	bd10      	pop	{r4, pc}

080a182e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a182e:	b510      	push	{r4, lr}
 80a1830:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1832:	6800      	ldr	r0, [r0, #0]
 80a1834:	b108      	cbz	r0, 80a183a <_ZN6String10invalidateEv+0xc>
 80a1836:	f7ff fa0b 	bl	80a0c50 <free>
	buffer = NULL;
 80a183a:	2300      	movs	r3, #0
 80a183c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a183e:	60a3      	str	r3, [r4, #8]
 80a1840:	6063      	str	r3, [r4, #4]
 80a1842:	bd10      	pop	{r4, pc}

080a1844 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1844:	b538      	push	{r3, r4, r5, lr}
 80a1846:	4604      	mov	r4, r0
 80a1848:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a184a:	6800      	ldr	r0, [r0, #0]
 80a184c:	3101      	adds	r1, #1
 80a184e:	f7ff fa07 	bl	80a0c60 <realloc>
	if (newbuffer) {
 80a1852:	b110      	cbz	r0, 80a185a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1854:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1858:	2001      	movs	r0, #1
	}
	return 0;
}
 80a185a:	bd38      	pop	{r3, r4, r5, pc}

080a185c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a185c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a185e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1860:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1862:	b113      	cbz	r3, 80a186a <_ZN6String7reserveEj+0xe>
 80a1864:	6843      	ldr	r3, [r0, #4]
 80a1866:	428b      	cmp	r3, r1
 80a1868:	d207      	bcs.n	80a187a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a186a:	4620      	mov	r0, r4
 80a186c:	f7ff ffea 	bl	80a1844 <_ZN6String12changeBufferEj>
 80a1870:	b120      	cbz	r0, 80a187c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1872:	68a3      	ldr	r3, [r4, #8]
 80a1874:	b90b      	cbnz	r3, 80a187a <_ZN6String7reserveEj+0x1e>
 80a1876:	6822      	ldr	r2, [r4, #0]
 80a1878:	7013      	strb	r3, [r2, #0]
 80a187a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a187c:	bd10      	pop	{r4, pc}

080a187e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a187e:	b570      	push	{r4, r5, r6, lr}
 80a1880:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1882:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1884:	4604      	mov	r4, r0
 80a1886:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1888:	f7ff ffe8 	bl	80a185c <_ZN6String7reserveEj>
 80a188c:	b918      	cbnz	r0, 80a1896 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a188e:	4620      	mov	r0, r4
 80a1890:	f7ff ffcd 	bl	80a182e <_ZN6String10invalidateEv>
		return *this;
 80a1894:	e009      	b.n	80a18aa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1896:	462a      	mov	r2, r5
 80a1898:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a189a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a189c:	6820      	ldr	r0, [r4, #0]
 80a189e:	f001 f9f3 	bl	80a2c88 <memcpy>
	buffer[len] = 0;
 80a18a2:	6822      	ldr	r2, [r4, #0]
 80a18a4:	68a3      	ldr	r3, [r4, #8]
 80a18a6:	2100      	movs	r1, #0
 80a18a8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a18aa:	4620      	mov	r0, r4
 80a18ac:	bd70      	pop	{r4, r5, r6, pc}

080a18ae <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a18ae:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a18b0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a18b2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a18b4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a18b6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a18b8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a18ba:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a18bc:	460d      	mov	r5, r1
 80a18be:	b139      	cbz	r1, 80a18d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a18c0:	4608      	mov	r0, r1
 80a18c2:	f001 fa38 	bl	80a2d36 <strlen>
 80a18c6:	4629      	mov	r1, r5
 80a18c8:	4602      	mov	r2, r0
 80a18ca:	4620      	mov	r0, r4
 80a18cc:	f7ff ffd7 	bl	80a187e <_ZN6String4copyEPKcj>
}
 80a18d0:	4620      	mov	r0, r4
 80a18d2:	bd38      	pop	{r3, r4, r5, pc}

080a18d4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a18d4:	b40e      	push	{r1, r2, r3}
 80a18d6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a18d8:	ac09      	add	r4, sp, #36	; 0x24
 80a18da:	f854 7b04 	ldr.w	r7, [r4], #4
 80a18de:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a18e0:	4623      	mov	r3, r4
 80a18e2:	463a      	mov	r2, r7
 80a18e4:	2105      	movs	r1, #5
 80a18e6:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a18e8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a18ea:	f7ff f9c1 	bl	80a0c70 <vsnprintf>
 80a18ee:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a18f0:	490b      	ldr	r1, [pc, #44]	; (80a1920 <_ZN6String6formatEPKcz+0x4c>)
 80a18f2:	4628      	mov	r0, r5
 80a18f4:	f7ff ffdb 	bl	80a18ae <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a18f8:	4631      	mov	r1, r6
 80a18fa:	4628      	mov	r0, r5
 80a18fc:	f7ff ffae 	bl	80a185c <_ZN6String7reserveEj>
    if (result.buffer) {
 80a1900:	6828      	ldr	r0, [r5, #0]
 80a1902:	b130      	cbz	r0, 80a1912 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1904:	4623      	mov	r3, r4
 80a1906:	463a      	mov	r2, r7
 80a1908:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a190a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a190c:	f7ff f9b0 	bl	80a0c70 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a1910:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a1912:	4628      	mov	r0, r5
 80a1914:	b004      	add	sp, #16
 80a1916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a191a:	b003      	add	sp, #12
 80a191c:	4770      	bx	lr
 80a191e:	bf00      	nop
 80a1920:	080a2f2b 	.word	0x080a2f2b

080a1924 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1928:	4b03      	ldr	r3, [pc, #12]	; (80a1938 <_GLOBAL__sub_I_System+0x14>)
 80a192a:	2000      	movs	r0, #0
 80a192c:	7018      	strb	r0, [r3, #0]
 80a192e:	8058      	strh	r0, [r3, #2]
 80a1930:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1932:	f7ff b8e9 	b.w	80a0b08 <set_system_mode>
 80a1936:	bf00      	nop
 80a1938:	20000134 	.word	0x20000134

080a193c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a193c:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	4b02      	ldr	r3, [pc, #8]	; (80a194c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1942:	601a      	str	r2, [r3, #0]
 80a1944:	4770      	bx	lr
 80a1946:	bf00      	nop
 80a1948:	20000004 	.word	0x20000004
 80a194c:	2000013c 	.word	0x2000013c

080a1950 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1950:	4770      	bx	lr

080a1952 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1952:	7441      	strb	r1, [r0, #17]
 80a1954:	4770      	bx	lr

080a1956 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1956:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1958:	7c00      	ldrb	r0, [r0, #16]
 80a195a:	f7ff f88d 	bl	80a0a78 <HAL_USART_Available_Data_For_Write>
}
 80a195e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1962:	bd08      	pop	{r3, pc}

080a1964 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1964:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1966:	7c00      	ldrb	r0, [r0, #16]
 80a1968:	f7ff f866 	bl	80a0a38 <HAL_USART_Available_Data>
}
 80a196c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1970:	bd08      	pop	{r3, pc}

080a1972 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1972:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1974:	7c00      	ldrb	r0, [r0, #16]
 80a1976:	f7ff f86f 	bl	80a0a58 <HAL_USART_Peek_Data>
}
 80a197a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a197e:	bf28      	it	cs
 80a1980:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1984:	bd08      	pop	{r3, pc}

080a1986 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1986:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1988:	7c00      	ldrb	r0, [r0, #16]
 80a198a:	f7ff f85d 	bl	80a0a48 <HAL_USART_Read_Data>
}
 80a198e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1992:	bf28      	it	cs
 80a1994:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1998:	bd08      	pop	{r3, pc}

080a199a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a199a:	7c00      	ldrb	r0, [r0, #16]
 80a199c:	f7ff b864 	b.w	80a0a68 <HAL_USART_Flush_Data>

080a19a0 <_ZN11USARTSerialD0Ev>:
 80a19a0:	b510      	push	{r4, lr}
 80a19a2:	4604      	mov	r4, r0
 80a19a4:	2114      	movs	r1, #20
 80a19a6:	f000 fa7e 	bl	80a1ea6 <_ZdlPvj>
 80a19aa:	4620      	mov	r0, r4
 80a19ac:	bd10      	pop	{r4, pc}

080a19ae <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a19ae:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a19b0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a19b2:	4604      	mov	r4, r0
 80a19b4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a19b6:	b925      	cbnz	r5, 80a19c2 <_ZN11USARTSerial5writeEh+0x14>
 80a19b8:	7c00      	ldrb	r0, [r0, #16]
 80a19ba:	f7ff f85d 	bl	80a0a78 <HAL_USART_Available_Data_For_Write>
 80a19be:	2800      	cmp	r0, #0
 80a19c0:	dd05      	ble.n	80a19ce <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a19c2:	4631      	mov	r1, r6
 80a19c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a19c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a19ca:	f7ff b82d 	b.w	80a0a28 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a19ce:	4628      	mov	r0, r5
 80a19d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a19d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a19d4:	b510      	push	{r4, lr}
 80a19d6:	4604      	mov	r4, r0
 80a19d8:	4608      	mov	r0, r1
 80a19da:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a19dc:	2200      	movs	r2, #0
 80a19de:	6062      	str	r2, [r4, #4]
 80a19e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a19e4:	60a2      	str	r2, [r4, #8]
 80a19e6:	4a05      	ldr	r2, [pc, #20]	; (80a19fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a19e8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a19ea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a19ec:	2201      	movs	r2, #1
 80a19ee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a19f0:	461a      	mov	r2, r3
 80a19f2:	f7ff f811 	bl	80a0a18 <HAL_USART_Init>
}
 80a19f6:	4620      	mov	r0, r4
 80a19f8:	bd10      	pop	{r4, pc}
 80a19fa:	bf00      	nop
 80a19fc:	080a2fe8 	.word	0x080a2fe8

080a1a00 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1a00:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1a02:	4d0c      	ldr	r5, [pc, #48]	; (80a1a34 <_Z22__fetch_global_Serial1v+0x34>)
 80a1a04:	6829      	ldr	r1, [r5, #0]
 80a1a06:	f011 0401 	ands.w	r4, r1, #1
 80a1a0a:	d111      	bne.n	80a1a30 <_Z22__fetch_global_Serial1v+0x30>
 80a1a0c:	4628      	mov	r0, r5
 80a1a0e:	f7fe fb48 	bl	80a00a2 <__cxa_guard_acquire>
 80a1a12:	b168      	cbz	r0, 80a1a30 <_Z22__fetch_global_Serial1v+0x30>
 80a1a14:	4a08      	ldr	r2, [pc, #32]	; (80a1a38 <_Z22__fetch_global_Serial1v+0x38>)
 80a1a16:	4621      	mov	r1, r4
 80a1a18:	4b08      	ldr	r3, [pc, #32]	; (80a1a3c <_Z22__fetch_global_Serial1v+0x3c>)
 80a1a1a:	4809      	ldr	r0, [pc, #36]	; (80a1a40 <_Z22__fetch_global_Serial1v+0x40>)
 80a1a1c:	f7ff ffda 	bl	80a19d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1a20:	4628      	mov	r0, r5
 80a1a22:	f7fe fb43 	bl	80a00ac <__cxa_guard_release>
 80a1a26:	4a07      	ldr	r2, [pc, #28]	; (80a1a44 <_Z22__fetch_global_Serial1v+0x44>)
 80a1a28:	4907      	ldr	r1, [pc, #28]	; (80a1a48 <_Z22__fetch_global_Serial1v+0x48>)
 80a1a2a:	4805      	ldr	r0, [pc, #20]	; (80a1a40 <_Z22__fetch_global_Serial1v+0x40>)
 80a1a2c:	f000 fa36 	bl	80a1e9c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1a30:	4803      	ldr	r0, [pc, #12]	; (80a1a40 <_Z22__fetch_global_Serial1v+0x40>)
 80a1a32:	bd38      	pop	{r3, r4, r5, pc}
 80a1a34:	200001d8 	.word	0x200001d8
 80a1a38:	200001dc 	.word	0x200001dc
 80a1a3c:	20000154 	.word	0x20000154
 80a1a40:	20000140 	.word	0x20000140
 80a1a44:	2000006c 	.word	0x2000006c
 80a1a48:	080a1951 	.word	0x080a1951

080a1a4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1a4c:	7441      	strb	r1, [r0, #17]
 80a1a4e:	4770      	bx	lr

080a1a50 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1a50:	4770      	bx	lr

080a1a52 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1a52:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1a54:	2100      	movs	r1, #0
 80a1a56:	7c00      	ldrb	r0, [r0, #16]
 80a1a58:	f7ff f836 	bl	80a0ac8 <HAL_USB_USART_Receive_Data>
}
 80a1a5c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1a60:	bf28      	it	cs
 80a1a62:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1a66:	bd08      	pop	{r3, pc}

080a1a68 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1a68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1a6a:	2101      	movs	r1, #1
 80a1a6c:	7c00      	ldrb	r0, [r0, #16]
 80a1a6e:	f7ff f82b 	bl	80a0ac8 <HAL_USB_USART_Receive_Data>
}
 80a1a72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1a76:	bf28      	it	cs
 80a1a78:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1a7c:	bd08      	pop	{r3, pc}

080a1a7e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1a7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1a80:	7c00      	ldrb	r0, [r0, #16]
 80a1a82:	f7ff f819 	bl	80a0ab8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1a86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a8a:	bd08      	pop	{r3, pc}

080a1a8c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1a8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1a8e:	7c00      	ldrb	r0, [r0, #16]
 80a1a90:	f7ff f80a 	bl	80a0aa8 <HAL_USB_USART_Available_Data>
}
 80a1a94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a98:	bd08      	pop	{r3, pc}

080a1a9a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1a9a:	7c00      	ldrb	r0, [r0, #16]
 80a1a9c:	f7ff b824 	b.w	80a0ae8 <HAL_USB_USART_Flush_Data>

080a1aa0 <_ZN9USBSerialD0Ev>:
 80a1aa0:	b510      	push	{r4, lr}
 80a1aa2:	4604      	mov	r4, r0
 80a1aa4:	2114      	movs	r1, #20
 80a1aa6:	f000 f9fe 	bl	80a1ea6 <_ZdlPvj>
 80a1aaa:	4620      	mov	r0, r4
 80a1aac:	bd10      	pop	{r4, pc}

080a1aae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1aae:	b538      	push	{r3, r4, r5, lr}
 80a1ab0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ab2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1ab4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ab6:	f7fe ffff 	bl	80a0ab8 <HAL_USB_USART_Available_Data_For_Write>
 80a1aba:	2800      	cmp	r0, #0
 80a1abc:	dc01      	bgt.n	80a1ac2 <_ZN9USBSerial5writeEh+0x14>
 80a1abe:	7c60      	ldrb	r0, [r4, #17]
 80a1ac0:	b128      	cbz	r0, 80a1ace <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1ac2:	4629      	mov	r1, r5
 80a1ac4:	7c20      	ldrb	r0, [r4, #16]
 80a1ac6:	f7ff f807 	bl	80a0ad8 <HAL_USB_USART_Send_Data>
 80a1aca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1ace:	bd38      	pop	{r3, r4, r5, pc}

080a1ad0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1ad0:	b510      	push	{r4, lr}
 80a1ad2:	4604      	mov	r4, r0
 80a1ad4:	2300      	movs	r3, #0
 80a1ad6:	6063      	str	r3, [r4, #4]
 80a1ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1adc:	60a3      	str	r3, [r4, #8]
 80a1ade:	4b05      	ldr	r3, [pc, #20]	; (80a1af4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1ae0:	4608      	mov	r0, r1
 80a1ae2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1ae4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1ae6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1ae8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1aea:	4611      	mov	r1, r2
 80a1aec:	f7fe ffcc 	bl	80a0a88 <HAL_USB_USART_Init>
}
 80a1af0:	4620      	mov	r0, r4
 80a1af2:	bd10      	pop	{r4, pc}
 80a1af4:	080a3018 	.word	0x080a3018

080a1af8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1af8:	2200      	movs	r2, #0
 80a1afa:	7c00      	ldrb	r0, [r0, #16]
 80a1afc:	f7fe bfcc 	b.w	80a0a98 <HAL_USB_USART_Begin>

080a1b00 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1b00:	b510      	push	{r4, lr}
 80a1b02:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1b04:	2214      	movs	r2, #20
 80a1b06:	2100      	movs	r1, #0
 80a1b08:	f001 f8c9 	bl	80a2c9e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1b0c:	4b05      	ldr	r3, [pc, #20]	; (80a1b24 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1b0e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1b10:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1b12:	4b05      	ldr	r3, [pc, #20]	; (80a1b28 <_Z19acquireSerialBufferv+0x28>)
 80a1b14:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1b16:	f240 1301 	movw	r3, #257	; 0x101
 80a1b1a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1b1c:	2381      	movs	r3, #129	; 0x81
 80a1b1e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1b20:	bd10      	pop	{r4, pc}
 80a1b22:	bf00      	nop
 80a1b24:	200002e5 	.word	0x200002e5
 80a1b28:	20000264 	.word	0x20000264

080a1b2c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1b2c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1b2e:	4d0e      	ldr	r5, [pc, #56]	; (80a1b68 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1b30:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1b32:	a801      	add	r0, sp, #4
 80a1b34:	f7ff ffe4 	bl	80a1b00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1b38:	6829      	ldr	r1, [r5, #0]
 80a1b3a:	f011 0401 	ands.w	r4, r1, #1
 80a1b3e:	d110      	bne.n	80a1b62 <_Z16_fetch_usbserialv+0x36>
 80a1b40:	4628      	mov	r0, r5
 80a1b42:	f7fe faae 	bl	80a00a2 <__cxa_guard_acquire>
 80a1b46:	b160      	cbz	r0, 80a1b62 <_Z16_fetch_usbserialv+0x36>
 80a1b48:	aa01      	add	r2, sp, #4
 80a1b4a:	4621      	mov	r1, r4
 80a1b4c:	4807      	ldr	r0, [pc, #28]	; (80a1b6c <_Z16_fetch_usbserialv+0x40>)
 80a1b4e:	f7ff ffbf 	bl	80a1ad0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1b52:	4628      	mov	r0, r5
 80a1b54:	f7fe faaa 	bl	80a00ac <__cxa_guard_release>
 80a1b58:	4a05      	ldr	r2, [pc, #20]	; (80a1b70 <_Z16_fetch_usbserialv+0x44>)
 80a1b5a:	4906      	ldr	r1, [pc, #24]	; (80a1b74 <_Z16_fetch_usbserialv+0x48>)
 80a1b5c:	4803      	ldr	r0, [pc, #12]	; (80a1b6c <_Z16_fetch_usbserialv+0x40>)
 80a1b5e:	f000 f99d 	bl	80a1e9c <__aeabi_atexit>
	return _usbserial;
}
 80a1b62:	4802      	ldr	r0, [pc, #8]	; (80a1b6c <_Z16_fetch_usbserialv+0x40>)
 80a1b64:	b007      	add	sp, #28
 80a1b66:	bd30      	pop	{r4, r5, pc}
 80a1b68:	20000260 	.word	0x20000260
 80a1b6c:	200003e8 	.word	0x200003e8
 80a1b70:	2000006c 	.word	0x2000006c
 80a1b74:	080a1a51 	.word	0x080a1a51

080a1b78 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1b78:	b510      	push	{r4, lr}
 80a1b7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1b7c:	2214      	movs	r2, #20
 80a1b7e:	2100      	movs	r1, #0
 80a1b80:	f001 f88d 	bl	80a2c9e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1b84:	4b05      	ldr	r3, [pc, #20]	; (80a1b9c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1b86:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1b88:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1b8a:	4b05      	ldr	r3, [pc, #20]	; (80a1ba0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1b8c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1b8e:	f240 1301 	movw	r3, #257	; 0x101
 80a1b92:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1b94:	2381      	movs	r3, #129	; 0x81
 80a1b96:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1b98:	bd10      	pop	{r4, pc}
 80a1b9a:	bf00      	nop
 80a1b9c:	20000498 	.word	0x20000498
 80a1ba0:	20000400 	.word	0x20000400

080a1ba4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1ba4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ba6:	4c0e      	ldr	r4, [pc, #56]	; (80a1be0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1ba8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1baa:	a801      	add	r0, sp, #4
 80a1bac:	f7ff ffe4 	bl	80a1b78 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1bb0:	6823      	ldr	r3, [r4, #0]
 80a1bb2:	07db      	lsls	r3, r3, #31
 80a1bb4:	d410      	bmi.n	80a1bd8 <_Z17_fetch_usbserial1v+0x34>
 80a1bb6:	4620      	mov	r0, r4
 80a1bb8:	f7fe fa73 	bl	80a00a2 <__cxa_guard_acquire>
 80a1bbc:	b160      	cbz	r0, 80a1bd8 <_Z17_fetch_usbserial1v+0x34>
 80a1bbe:	aa01      	add	r2, sp, #4
 80a1bc0:	2101      	movs	r1, #1
 80a1bc2:	4808      	ldr	r0, [pc, #32]	; (80a1be4 <_Z17_fetch_usbserial1v+0x40>)
 80a1bc4:	f7ff ff84 	bl	80a1ad0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1bc8:	4620      	mov	r0, r4
 80a1bca:	f7fe fa6f 	bl	80a00ac <__cxa_guard_release>
 80a1bce:	4a06      	ldr	r2, [pc, #24]	; (80a1be8 <_Z17_fetch_usbserial1v+0x44>)
 80a1bd0:	4906      	ldr	r1, [pc, #24]	; (80a1bec <_Z17_fetch_usbserial1v+0x48>)
 80a1bd2:	4804      	ldr	r0, [pc, #16]	; (80a1be4 <_Z17_fetch_usbserial1v+0x40>)
 80a1bd4:	f000 f962 	bl	80a1e9c <__aeabi_atexit>
  return _usbserial1;
}
 80a1bd8:	4802      	ldr	r0, [pc, #8]	; (80a1be4 <_Z17_fetch_usbserial1v+0x40>)
 80a1bda:	b006      	add	sp, #24
 80a1bdc:	bd10      	pop	{r4, pc}
 80a1bde:	bf00      	nop
 80a1be0:	200003fc 	.word	0x200003fc
 80a1be4:	20000484 	.word	0x20000484
 80a1be8:	2000006c 	.word	0x2000006c
 80a1bec:	080a1a51 	.word	0x080a1a51

080a1bf0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1bf0:	2200      	movs	r2, #0
 80a1bf2:	4611      	mov	r1, r2
 80a1bf4:	6840      	ldr	r0, [r0, #4]
 80a1bf6:	f7fe bfeb 	b.w	80a0bd0 <network_ready>

080a1bfa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1bfc:	4616      	mov	r6, r2
 80a1bfe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1c00:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1c02:	460f      	mov	r7, r1
 80a1c04:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1c06:	2100      	movs	r1, #0
 80a1c08:	a803      	add	r0, sp, #12
 80a1c0a:	f001 f848 	bl	80a2c9e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1c0e:	4630      	mov	r0, r6
 80a1c10:	f001 f891 	bl	80a2d36 <strlen>
 80a1c14:	2500      	movs	r5, #0
 80a1c16:	9500      	str	r5, [sp, #0]
 80a1c18:	b281      	uxth	r1, r0
 80a1c1a:	687b      	ldr	r3, [r7, #4]
 80a1c1c:	aa03      	add	r2, sp, #12
 80a1c1e:	4630      	mov	r0, r6
 80a1c20:	f7fe ff6a 	bl	80a0af8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1c24:	b120      	cbz	r0, 80a1c30 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1c26:	4629      	mov	r1, r5
 80a1c28:	4620      	mov	r0, r4
 80a1c2a:	f7ff fbf1 	bl	80a1410 <_ZN9IPAddressC1Em>
 80a1c2e:	e003      	b.n	80a1c38 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1c30:	a903      	add	r1, sp, #12
 80a1c32:	4620      	mov	r0, r4
 80a1c34:	f7ff fbda 	bl	80a13ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1c38:	4620      	mov	r0, r4
 80a1c3a:	b009      	add	sp, #36	; 0x24
 80a1c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1c3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1c3e:	2200      	movs	r2, #0
 80a1c40:	4611      	mov	r1, r2
 80a1c42:	6840      	ldr	r0, [r0, #4]
 80a1c44:	f7fe bfe4 	b.w	80a0c10 <network_listening>

080a1c48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1c48:	2200      	movs	r2, #0
 80a1c4a:	4611      	mov	r1, r2
 80a1c4c:	6840      	ldr	r0, [r0, #4]
 80a1c4e:	f7fe bfef 	b.w	80a0c30 <network_get_listen_timeout>

080a1c52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1c52:	2200      	movs	r2, #0
 80a1c54:	6840      	ldr	r0, [r0, #4]
 80a1c56:	f7fe bfe3 	b.w	80a0c20 <network_set_listen_timeout>

080a1c5a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1c5a:	2200      	movs	r2, #0
 80a1c5c:	f081 0101 	eor.w	r1, r1, #1
 80a1c60:	6840      	ldr	r0, [r0, #4]
 80a1c62:	f7fe bfcd 	b.w	80a0c00 <network_listen>

080a1c66 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1c66:	2300      	movs	r3, #0
 80a1c68:	461a      	mov	r2, r3
 80a1c6a:	4619      	mov	r1, r3
 80a1c6c:	6840      	ldr	r0, [r0, #4]
 80a1c6e:	f7fe bfbf 	b.w	80a0bf0 <network_off>

080a1c72 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1c72:	2300      	movs	r3, #0
 80a1c74:	461a      	mov	r2, r3
 80a1c76:	4619      	mov	r1, r3
 80a1c78:	6840      	ldr	r0, [r0, #4]
 80a1c7a:	f7fe bfb1 	b.w	80a0be0 <network_on>

080a1c7e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1c7e:	2200      	movs	r2, #0
 80a1c80:	4611      	mov	r1, r2
 80a1c82:	6840      	ldr	r0, [r0, #4]
 80a1c84:	f7fe bf94 	b.w	80a0bb0 <network_connecting>

080a1c88 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1c88:	2200      	movs	r2, #0
 80a1c8a:	2102      	movs	r1, #2
 80a1c8c:	6840      	ldr	r0, [r0, #4]
 80a1c8e:	f7fe bf97 	b.w	80a0bc0 <network_disconnect>

080a1c92 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1c92:	2300      	movs	r3, #0
 80a1c94:	461a      	mov	r2, r3
 80a1c96:	6840      	ldr	r0, [r0, #4]
 80a1c98:	f7fe bf82 	b.w	80a0ba0 <network_connect>

080a1c9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1c9c:	4b02      	ldr	r3, [pc, #8]	; (80a1ca8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1c9e:	2204      	movs	r2, #4
 80a1ca0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1ca2:	4a02      	ldr	r2, [pc, #8]	; (80a1cac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1ca4:	601a      	str	r2, [r3, #0]
 80a1ca6:	4770      	bx	lr
 80a1ca8:	2000059c 	.word	0x2000059c
 80a1cac:	080a3048 	.word	0x080a3048

080a1cb0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1cb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1cb2:	4b14      	ldr	r3, [pc, #80]	; (80a1d04 <serialEventRun+0x54>)
 80a1cb4:	b133      	cbz	r3, 80a1cc4 <serialEventRun+0x14>
 80a1cb6:	f7ff ff39 	bl	80a1b2c <_Z16_fetch_usbserialv>
 80a1cba:	6803      	ldr	r3, [r0, #0]
 80a1cbc:	691b      	ldr	r3, [r3, #16]
 80a1cbe:	4798      	blx	r3
 80a1cc0:	2800      	cmp	r0, #0
 80a1cc2:	dc16      	bgt.n	80a1cf2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1cc4:	4b10      	ldr	r3, [pc, #64]	; (80a1d08 <serialEventRun+0x58>)
 80a1cc6:	b133      	cbz	r3, 80a1cd6 <serialEventRun+0x26>
 80a1cc8:	f7ff fe9a 	bl	80a1a00 <_Z22__fetch_global_Serial1v>
 80a1ccc:	6803      	ldr	r3, [r0, #0]
 80a1cce:	691b      	ldr	r3, [r3, #16]
 80a1cd0:	4798      	blx	r3
 80a1cd2:	2800      	cmp	r0, #0
 80a1cd4:	dc10      	bgt.n	80a1cf8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1cd6:	4b0d      	ldr	r3, [pc, #52]	; (80a1d0c <serialEventRun+0x5c>)
 80a1cd8:	b10b      	cbz	r3, 80a1cde <serialEventRun+0x2e>
 80a1cda:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1cde:	4b0c      	ldr	r3, [pc, #48]	; (80a1d10 <serialEventRun+0x60>)
 80a1ce0:	b17b      	cbz	r3, 80a1d02 <serialEventRun+0x52>
 80a1ce2:	f7ff ff5f 	bl	80a1ba4 <_Z17_fetch_usbserial1v>
 80a1ce6:	6803      	ldr	r3, [r0, #0]
 80a1ce8:	691b      	ldr	r3, [r3, #16]
 80a1cea:	4798      	blx	r3
 80a1cec:	2800      	cmp	r0, #0
 80a1cee:	dc06      	bgt.n	80a1cfe <serialEventRun+0x4e>
 80a1cf0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1cf2:	f3af 8000 	nop.w
 80a1cf6:	e7e5      	b.n	80a1cc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1cf8:	f3af 8000 	nop.w
 80a1cfc:	e7eb      	b.n	80a1cd6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1cfe:	f3af 8000 	nop.w
 80a1d02:	bd08      	pop	{r3, pc}
	...

080a1d14 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1d14:	b508      	push	{r3, lr}
	serialEventRun();
 80a1d16:	f7ff ffcb 	bl	80a1cb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1d1a:	f7fe fe0b 	bl	80a0934 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1d1e:	4b01      	ldr	r3, [pc, #4]	; (80a1d24 <_post_loop+0x10>)
 80a1d20:	6018      	str	r0, [r3, #0]
 80a1d22:	bd08      	pop	{r3, pc}
 80a1d24:	200005ac 	.word	0x200005ac

080a1d28 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1d28:	4802      	ldr	r0, [pc, #8]	; (80a1d34 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1d2a:	4a03      	ldr	r2, [pc, #12]	; (80a1d38 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1d2c:	4903      	ldr	r1, [pc, #12]	; (80a1d3c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1d2e:	1a12      	subs	r2, r2, r0
 80a1d30:	f000 bfaa 	b.w	80a2c88 <memcpy>
 80a1d34:	40024000 	.word	0x40024000
 80a1d38:	40024004 	.word	0x40024004
 80a1d3c:	080a3120 	.word	0x080a3120

080a1d40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1d40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1d42:	2300      	movs	r3, #0
 80a1d44:	9300      	str	r3, [sp, #0]
 80a1d46:	461a      	mov	r2, r3
 80a1d48:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1d4c:	f7fe ff06 	bl	80a0b5c <system_ctrl_set_result>
}
 80a1d50:	b003      	add	sp, #12
 80a1d52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1d58 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1d58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1d5a:	8843      	ldrh	r3, [r0, #2]
 80a1d5c:	2b0a      	cmp	r3, #10
 80a1d5e:	d008      	beq.n	80a1d72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1d60:	2b50      	cmp	r3, #80	; 0x50
 80a1d62:	d109      	bne.n	80a1d78 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1d64:	4b09      	ldr	r3, [pc, #36]	; (80a1d8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1d66:	681b      	ldr	r3, [r3, #0]
 80a1d68:	b13b      	cbz	r3, 80a1d7a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1d6a:	b003      	add	sp, #12
 80a1d6c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1d70:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1d72:	f7ff ffe5 	bl	80a1d40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1d76:	e006      	b.n	80a1d86 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1d78:	2300      	movs	r3, #0
 80a1d7a:	9300      	str	r3, [sp, #0]
 80a1d7c:	461a      	mov	r2, r3
 80a1d7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1d82:	f7fe feeb 	bl	80a0b5c <system_ctrl_set_result>
        break;
    }
}
 80a1d86:	b003      	add	sp, #12
 80a1d88:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1d8c:	200005a4 	.word	0x200005a4

080a1d90 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1d90:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1d92:	4c10      	ldr	r4, [pc, #64]	; (80a1dd4 <module_user_init_hook+0x44>)
 80a1d94:	4d10      	ldr	r5, [pc, #64]	; (80a1dd8 <module_user_init_hook+0x48>)
 80a1d96:	6823      	ldr	r3, [r4, #0]
 80a1d98:	42ab      	cmp	r3, r5
 80a1d9a:	4b10      	ldr	r3, [pc, #64]	; (80a1ddc <module_user_init_hook+0x4c>)
 80a1d9c:	bf0c      	ite	eq
 80a1d9e:	2201      	moveq	r2, #1
 80a1da0:	2200      	movne	r2, #0
 80a1da2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1da4:	d002      	beq.n	80a1dac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1da6:	f7ff ffbf 	bl	80a1d28 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1daa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1dac:	f7fe fdba 	bl	80a0924 <HAL_RNG_GetRandomNumber>
 80a1db0:	4604      	mov	r4, r0
    srand(seed);
 80a1db2:	f000 ff7d 	bl	80a2cb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1db6:	4b0a      	ldr	r3, [pc, #40]	; (80a1de0 <module_user_init_hook+0x50>)
 80a1db8:	b113      	cbz	r3, 80a1dc0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1dba:	4620      	mov	r0, r4
 80a1dbc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1dc0:	2100      	movs	r1, #0
 80a1dc2:	4807      	ldr	r0, [pc, #28]	; (80a1de0 <module_user_init_hook+0x50>)
 80a1dc4:	f7fe fee4 	bl	80a0b90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1dcc:	2100      	movs	r1, #0
 80a1dce:	4805      	ldr	r0, [pc, #20]	; (80a1de4 <module_user_init_hook+0x54>)
 80a1dd0:	f7fe beba 	b.w	80a0b48 <system_ctrl_set_app_request_handler>
 80a1dd4:	40024000 	.word	0x40024000
 80a1dd8:	9a271c1e 	.word	0x9a271c1e
 80a1ddc:	200005a8 	.word	0x200005a8
 80a1de0:	00000000 	.word	0x00000000
 80a1de4:	080a1d59 	.word	0x080a1d59

080a1de8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1de8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1dea:	4d0b      	ldr	r5, [pc, #44]	; (80a1e18 <_Z19__fetch_global_Wirev+0x30>)
 80a1dec:	6829      	ldr	r1, [r5, #0]
 80a1dee:	f011 0401 	ands.w	r4, r1, #1
 80a1df2:	d10f      	bne.n	80a1e14 <_Z19__fetch_global_Wirev+0x2c>
 80a1df4:	4628      	mov	r0, r5
 80a1df6:	f7fe f954 	bl	80a00a2 <__cxa_guard_acquire>
 80a1dfa:	b158      	cbz	r0, 80a1e14 <_Z19__fetch_global_Wirev+0x2c>
 80a1dfc:	4621      	mov	r1, r4
 80a1dfe:	4807      	ldr	r0, [pc, #28]	; (80a1e1c <_Z19__fetch_global_Wirev+0x34>)
 80a1e00:	f7ff fa8a 	bl	80a1318 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1e04:	4628      	mov	r0, r5
 80a1e06:	f7fe f951 	bl	80a00ac <__cxa_guard_release>
 80a1e0a:	4a05      	ldr	r2, [pc, #20]	; (80a1e20 <_Z19__fetch_global_Wirev+0x38>)
 80a1e0c:	4905      	ldr	r1, [pc, #20]	; (80a1e24 <_Z19__fetch_global_Wirev+0x3c>)
 80a1e0e:	4803      	ldr	r0, [pc, #12]	; (80a1e1c <_Z19__fetch_global_Wirev+0x34>)
 80a1e10:	f000 f844 	bl	80a1e9c <__aeabi_atexit>
	return wire;
}
 80a1e14:	4801      	ldr	r0, [pc, #4]	; (80a1e1c <_Z19__fetch_global_Wirev+0x34>)
 80a1e16:	bd38      	pop	{r3, r4, r5, pc}
 80a1e18:	200005b0 	.word	0x200005b0
 80a1e1c:	200005b4 	.word	0x200005b4
 80a1e20:	2000006c 	.word	0x2000006c
 80a1e24:	080a12c1 	.word	0x080a12c1

080a1e28 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1e28:	b513      	push	{r0, r1, r4, lr}
 80a1e2a:	4c08      	ldr	r4, [pc, #32]	; (80a1e4c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1e2c:	2300      	movs	r3, #0
 80a1e2e:	461a      	mov	r2, r3
 80a1e30:	4619      	mov	r1, r3
 80a1e32:	9300      	str	r3, [sp, #0]
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	f7ff fb01 	bl	80a143c <_ZN9IPAddressC1Ehhhh>
 80a1e3a:	4620      	mov	r0, r4
 80a1e3c:	4a04      	ldr	r2, [pc, #16]	; (80a1e50 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1e3e:	4905      	ldr	r1, [pc, #20]	; (80a1e54 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1e40:	b002      	add	sp, #8
 80a1e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1e46:	f000 b829 	b.w	80a1e9c <__aeabi_atexit>
 80a1e4a:	bf00      	nop
 80a1e4c:	200005c8 	.word	0x200005c8
 80a1e50:	2000006c 	.word	0x2000006c
 80a1e54:	080a138f 	.word	0x080a138f

080a1e58 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1e58:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1e5a:	4c0c      	ldr	r4, [pc, #48]	; (80a1e8c <_GLOBAL__sub_I_SPI+0x34>)
 80a1e5c:	4e0c      	ldr	r6, [pc, #48]	; (80a1e90 <_GLOBAL__sub_I_SPI+0x38>)
 80a1e5e:	4d0d      	ldr	r5, [pc, #52]	; (80a1e94 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1e60:	2100      	movs	r1, #0
 80a1e62:	4620      	mov	r0, r4
 80a1e64:	f7ff fcc8 	bl	80a17f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1e68:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1e6a:	4c0b      	ldr	r4, [pc, #44]	; (80a1e98 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1e6c:	4632      	mov	r2, r6
 80a1e6e:	4629      	mov	r1, r5
 80a1e70:	f000 f814 	bl	80a1e9c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1e74:	2101      	movs	r1, #1
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	f7ff fcbe 	bl	80a17f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1e7c:	4632      	mov	r2, r6
 80a1e7e:	4629      	mov	r1, r5
 80a1e80:	4620      	mov	r0, r4
 80a1e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1e86:	f000 b809 	b.w	80a1e9c <__aeabi_atexit>
 80a1e8a:	bf00      	nop
 80a1e8c:	200005e0 	.word	0x200005e0
 80a1e90:	2000006c 	.word	0x2000006c
 80a1e94:	080a17e9 	.word	0x080a17e9
 80a1e98:	200005f0 	.word	0x200005f0

080a1e9c <__aeabi_atexit>:
 80a1e9c:	460b      	mov	r3, r1
 80a1e9e:	4601      	mov	r1, r0
 80a1ea0:	4618      	mov	r0, r3
 80a1ea2:	f000 bee3 	b.w	80a2c6c <__cxa_atexit>

080a1ea6 <_ZdlPvj>:
 80a1ea6:	f7fe b8fa 	b.w	80a009e <_ZdlPv>

080a1eaa <_ZSt25__throw_bad_function_callv>:
 80a1eaa:	b508      	push	{r3, lr}
 80a1eac:	f7fe fee8 	bl	80a0c80 <abort>

080a1eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1eb0:	4b24      	ldr	r3, [pc, #144]	; (80a1f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1eb2:	681a      	ldr	r2, [r3, #0]
 80a1eb4:	07d0      	lsls	r0, r2, #31
 80a1eb6:	bf5c      	itt	pl
 80a1eb8:	2201      	movpl	r2, #1
 80a1eba:	601a      	strpl	r2, [r3, #0]
 80a1ebc:	4b22      	ldr	r3, [pc, #136]	; (80a1f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1ebe:	681a      	ldr	r2, [r3, #0]
 80a1ec0:	07d1      	lsls	r1, r2, #31
 80a1ec2:	bf5c      	itt	pl
 80a1ec4:	2201      	movpl	r2, #1
 80a1ec6:	601a      	strpl	r2, [r3, #0]
 80a1ec8:	4b20      	ldr	r3, [pc, #128]	; (80a1f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1eca:	681a      	ldr	r2, [r3, #0]
 80a1ecc:	07d2      	lsls	r2, r2, #31
 80a1ece:	bf5c      	itt	pl
 80a1ed0:	2201      	movpl	r2, #1
 80a1ed2:	601a      	strpl	r2, [r3, #0]
 80a1ed4:	4b1e      	ldr	r3, [pc, #120]	; (80a1f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1ed6:	681a      	ldr	r2, [r3, #0]
 80a1ed8:	07d0      	lsls	r0, r2, #31
 80a1eda:	bf5c      	itt	pl
 80a1edc:	2201      	movpl	r2, #1
 80a1ede:	601a      	strpl	r2, [r3, #0]
 80a1ee0:	4b1c      	ldr	r3, [pc, #112]	; (80a1f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1ee2:	681a      	ldr	r2, [r3, #0]
 80a1ee4:	07d1      	lsls	r1, r2, #31
 80a1ee6:	bf5c      	itt	pl
 80a1ee8:	2201      	movpl	r2, #1
 80a1eea:	601a      	strpl	r2, [r3, #0]
 80a1eec:	4b1a      	ldr	r3, [pc, #104]	; (80a1f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	07d2      	lsls	r2, r2, #31
 80a1ef2:	bf5c      	itt	pl
 80a1ef4:	2201      	movpl	r2, #1
 80a1ef6:	601a      	strpl	r2, [r3, #0]
 80a1ef8:	4b18      	ldr	r3, [pc, #96]	; (80a1f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1efa:	681a      	ldr	r2, [r3, #0]
 80a1efc:	07d0      	lsls	r0, r2, #31
 80a1efe:	bf5c      	itt	pl
 80a1f00:	2201      	movpl	r2, #1
 80a1f02:	601a      	strpl	r2, [r3, #0]
 80a1f04:	4b16      	ldr	r3, [pc, #88]	; (80a1f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1f06:	681a      	ldr	r2, [r3, #0]
 80a1f08:	07d1      	lsls	r1, r2, #31
 80a1f0a:	bf5c      	itt	pl
 80a1f0c:	2201      	movpl	r2, #1
 80a1f0e:	601a      	strpl	r2, [r3, #0]
 80a1f10:	4b14      	ldr	r3, [pc, #80]	; (80a1f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	07d2      	lsls	r2, r2, #31
 80a1f16:	bf5c      	itt	pl
 80a1f18:	2201      	movpl	r2, #1
 80a1f1a:	601a      	strpl	r2, [r3, #0]
 80a1f1c:	4b12      	ldr	r3, [pc, #72]	; (80a1f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1f1e:	681a      	ldr	r2, [r3, #0]
 80a1f20:	07d0      	lsls	r0, r2, #31
 80a1f22:	bf5c      	itt	pl
 80a1f24:	2201      	movpl	r2, #1
 80a1f26:	601a      	strpl	r2, [r3, #0]
 80a1f28:	4b10      	ldr	r3, [pc, #64]	; (80a1f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1f2a:	681a      	ldr	r2, [r3, #0]
 80a1f2c:	07d1      	lsls	r1, r2, #31
 80a1f2e:	bf5c      	itt	pl
 80a1f30:	2201      	movpl	r2, #1
 80a1f32:	601a      	strpl	r2, [r3, #0]
 80a1f34:	4b0e      	ldr	r3, [pc, #56]	; (80a1f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1f36:	681a      	ldr	r2, [r3, #0]
 80a1f38:	07d2      	lsls	r2, r2, #31
 80a1f3a:	bf5c      	itt	pl
 80a1f3c:	2201      	movpl	r2, #1
 80a1f3e:	601a      	strpl	r2, [r3, #0]
 80a1f40:	4770      	bx	lr
 80a1f42:	bf00      	nop
 80a1f44:	2000062c 	.word	0x2000062c
 80a1f48:	20000628 	.word	0x20000628
 80a1f4c:	20000624 	.word	0x20000624
 80a1f50:	20000620 	.word	0x20000620
 80a1f54:	2000061c 	.word	0x2000061c
 80a1f58:	20000618 	.word	0x20000618
 80a1f5c:	20000614 	.word	0x20000614
 80a1f60:	20000610 	.word	0x20000610
 80a1f64:	2000060c 	.word	0x2000060c
 80a1f68:	20000608 	.word	0x20000608
 80a1f6c:	20000604 	.word	0x20000604
 80a1f70:	20000600 	.word	0x20000600

080a1f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1f74:	4b18      	ldr	r3, [pc, #96]	; (80a1fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1f76:	681a      	ldr	r2, [r3, #0]
 80a1f78:	07d1      	lsls	r1, r2, #31
 80a1f7a:	bf5c      	itt	pl
 80a1f7c:	2201      	movpl	r2, #1
 80a1f7e:	601a      	strpl	r2, [r3, #0]
 80a1f80:	4b16      	ldr	r3, [pc, #88]	; (80a1fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1f82:	681a      	ldr	r2, [r3, #0]
 80a1f84:	07d2      	lsls	r2, r2, #31
 80a1f86:	bf5c      	itt	pl
 80a1f88:	2201      	movpl	r2, #1
 80a1f8a:	601a      	strpl	r2, [r3, #0]
 80a1f8c:	4b14      	ldr	r3, [pc, #80]	; (80a1fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1f8e:	681a      	ldr	r2, [r3, #0]
 80a1f90:	07d0      	lsls	r0, r2, #31
 80a1f92:	bf5c      	itt	pl
 80a1f94:	2201      	movpl	r2, #1
 80a1f96:	601a      	strpl	r2, [r3, #0]
 80a1f98:	4b12      	ldr	r3, [pc, #72]	; (80a1fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1f9a:	681a      	ldr	r2, [r3, #0]
 80a1f9c:	07d1      	lsls	r1, r2, #31
 80a1f9e:	bf5c      	itt	pl
 80a1fa0:	2201      	movpl	r2, #1
 80a1fa2:	601a      	strpl	r2, [r3, #0]
 80a1fa4:	4b10      	ldr	r3, [pc, #64]	; (80a1fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1fa6:	681a      	ldr	r2, [r3, #0]
 80a1fa8:	07d2      	lsls	r2, r2, #31
 80a1faa:	bf5c      	itt	pl
 80a1fac:	2201      	movpl	r2, #1
 80a1fae:	601a      	strpl	r2, [r3, #0]
 80a1fb0:	4b0e      	ldr	r3, [pc, #56]	; (80a1fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1fb2:	681a      	ldr	r2, [r3, #0]
 80a1fb4:	07d0      	lsls	r0, r2, #31
 80a1fb6:	bf5c      	itt	pl
 80a1fb8:	2201      	movpl	r2, #1
 80a1fba:	601a      	strpl	r2, [r3, #0]
 80a1fbc:	4b0c      	ldr	r3, [pc, #48]	; (80a1ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1fbe:	681a      	ldr	r2, [r3, #0]
 80a1fc0:	07d1      	lsls	r1, r2, #31
 80a1fc2:	bf5c      	itt	pl
 80a1fc4:	2201      	movpl	r2, #1
 80a1fc6:	601a      	strpl	r2, [r3, #0]
 80a1fc8:	4b0a      	ldr	r3, [pc, #40]	; (80a1ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1fca:	681a      	ldr	r2, [r3, #0]
 80a1fcc:	07d2      	lsls	r2, r2, #31
 80a1fce:	bf5c      	itt	pl
 80a1fd0:	2201      	movpl	r2, #1
 80a1fd2:	601a      	strpl	r2, [r3, #0]
 80a1fd4:	4770      	bx	lr
 80a1fd6:	bf00      	nop
 80a1fd8:	2000064c 	.word	0x2000064c
 80a1fdc:	20000648 	.word	0x20000648
 80a1fe0:	20000644 	.word	0x20000644
 80a1fe4:	20000640 	.word	0x20000640
 80a1fe8:	2000063c 	.word	0x2000063c
 80a1fec:	20000638 	.word	0x20000638
 80a1ff0:	20000634 	.word	0x20000634
 80a1ff4:	20000630 	.word	0x20000630

080a1ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1ff8:	4b18      	ldr	r3, [pc, #96]	; (80a205c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1ffa:	681a      	ldr	r2, [r3, #0]
 80a1ffc:	07d1      	lsls	r1, r2, #31
 80a1ffe:	bf5c      	itt	pl
 80a2000:	2201      	movpl	r2, #1
 80a2002:	601a      	strpl	r2, [r3, #0]
 80a2004:	4b16      	ldr	r3, [pc, #88]	; (80a2060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2006:	681a      	ldr	r2, [r3, #0]
 80a2008:	07d2      	lsls	r2, r2, #31
 80a200a:	bf5c      	itt	pl
 80a200c:	2201      	movpl	r2, #1
 80a200e:	601a      	strpl	r2, [r3, #0]
 80a2010:	4b14      	ldr	r3, [pc, #80]	; (80a2064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2012:	681a      	ldr	r2, [r3, #0]
 80a2014:	07d0      	lsls	r0, r2, #31
 80a2016:	bf5c      	itt	pl
 80a2018:	2201      	movpl	r2, #1
 80a201a:	601a      	strpl	r2, [r3, #0]
 80a201c:	4b12      	ldr	r3, [pc, #72]	; (80a2068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a201e:	681a      	ldr	r2, [r3, #0]
 80a2020:	07d1      	lsls	r1, r2, #31
 80a2022:	bf5c      	itt	pl
 80a2024:	2201      	movpl	r2, #1
 80a2026:	601a      	strpl	r2, [r3, #0]
 80a2028:	4b10      	ldr	r3, [pc, #64]	; (80a206c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a202a:	681a      	ldr	r2, [r3, #0]
 80a202c:	07d2      	lsls	r2, r2, #31
 80a202e:	bf5c      	itt	pl
 80a2030:	2201      	movpl	r2, #1
 80a2032:	601a      	strpl	r2, [r3, #0]
 80a2034:	4b0e      	ldr	r3, [pc, #56]	; (80a2070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2036:	681a      	ldr	r2, [r3, #0]
 80a2038:	07d0      	lsls	r0, r2, #31
 80a203a:	bf5c      	itt	pl
 80a203c:	2201      	movpl	r2, #1
 80a203e:	601a      	strpl	r2, [r3, #0]
 80a2040:	4b0c      	ldr	r3, [pc, #48]	; (80a2074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2042:	681a      	ldr	r2, [r3, #0]
 80a2044:	07d1      	lsls	r1, r2, #31
 80a2046:	bf5c      	itt	pl
 80a2048:	2201      	movpl	r2, #1
 80a204a:	601a      	strpl	r2, [r3, #0]
 80a204c:	4b0a      	ldr	r3, [pc, #40]	; (80a2078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a204e:	681a      	ldr	r2, [r3, #0]
 80a2050:	07d2      	lsls	r2, r2, #31
 80a2052:	bf5c      	itt	pl
 80a2054:	2201      	movpl	r2, #1
 80a2056:	601a      	strpl	r2, [r3, #0]
 80a2058:	4770      	bx	lr
 80a205a:	bf00      	nop
 80a205c:	2000066c 	.word	0x2000066c
 80a2060:	20000668 	.word	0x20000668
 80a2064:	20000664 	.word	0x20000664
 80a2068:	20000660 	.word	0x20000660
 80a206c:	2000065c 	.word	0x2000065c
 80a2070:	20000658 	.word	0x20000658
 80a2074:	20000654 	.word	0x20000654
 80a2078:	20000650 	.word	0x20000650

080a207c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a207c:	4b24      	ldr	r3, [pc, #144]	; (80a2110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a207e:	681a      	ldr	r2, [r3, #0]
 80a2080:	07d0      	lsls	r0, r2, #31
 80a2082:	bf5c      	itt	pl
 80a2084:	2201      	movpl	r2, #1
 80a2086:	601a      	strpl	r2, [r3, #0]
 80a2088:	4b22      	ldr	r3, [pc, #136]	; (80a2114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a208a:	681a      	ldr	r2, [r3, #0]
 80a208c:	07d1      	lsls	r1, r2, #31
 80a208e:	bf5c      	itt	pl
 80a2090:	2201      	movpl	r2, #1
 80a2092:	601a      	strpl	r2, [r3, #0]
 80a2094:	4b20      	ldr	r3, [pc, #128]	; (80a2118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2096:	681a      	ldr	r2, [r3, #0]
 80a2098:	07d2      	lsls	r2, r2, #31
 80a209a:	bf5c      	itt	pl
 80a209c:	2201      	movpl	r2, #1
 80a209e:	601a      	strpl	r2, [r3, #0]
 80a20a0:	4b1e      	ldr	r3, [pc, #120]	; (80a211c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a20a2:	681a      	ldr	r2, [r3, #0]
 80a20a4:	07d0      	lsls	r0, r2, #31
 80a20a6:	bf5c      	itt	pl
 80a20a8:	2201      	movpl	r2, #1
 80a20aa:	601a      	strpl	r2, [r3, #0]
 80a20ac:	4b1c      	ldr	r3, [pc, #112]	; (80a2120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a20ae:	681a      	ldr	r2, [r3, #0]
 80a20b0:	07d1      	lsls	r1, r2, #31
 80a20b2:	bf5c      	itt	pl
 80a20b4:	2201      	movpl	r2, #1
 80a20b6:	601a      	strpl	r2, [r3, #0]
 80a20b8:	4b1a      	ldr	r3, [pc, #104]	; (80a2124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a20ba:	681a      	ldr	r2, [r3, #0]
 80a20bc:	07d2      	lsls	r2, r2, #31
 80a20be:	bf5c      	itt	pl
 80a20c0:	2201      	movpl	r2, #1
 80a20c2:	601a      	strpl	r2, [r3, #0]
 80a20c4:	4b18      	ldr	r3, [pc, #96]	; (80a2128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a20c6:	681a      	ldr	r2, [r3, #0]
 80a20c8:	07d0      	lsls	r0, r2, #31
 80a20ca:	bf5c      	itt	pl
 80a20cc:	2201      	movpl	r2, #1
 80a20ce:	601a      	strpl	r2, [r3, #0]
 80a20d0:	4b16      	ldr	r3, [pc, #88]	; (80a212c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a20d2:	681a      	ldr	r2, [r3, #0]
 80a20d4:	07d1      	lsls	r1, r2, #31
 80a20d6:	bf5c      	itt	pl
 80a20d8:	2201      	movpl	r2, #1
 80a20da:	601a      	strpl	r2, [r3, #0]
 80a20dc:	4b14      	ldr	r3, [pc, #80]	; (80a2130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a20de:	681a      	ldr	r2, [r3, #0]
 80a20e0:	07d2      	lsls	r2, r2, #31
 80a20e2:	bf5c      	itt	pl
 80a20e4:	2201      	movpl	r2, #1
 80a20e6:	601a      	strpl	r2, [r3, #0]
 80a20e8:	4b12      	ldr	r3, [pc, #72]	; (80a2134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a20ea:	681a      	ldr	r2, [r3, #0]
 80a20ec:	07d0      	lsls	r0, r2, #31
 80a20ee:	bf5c      	itt	pl
 80a20f0:	2201      	movpl	r2, #1
 80a20f2:	601a      	strpl	r2, [r3, #0]
 80a20f4:	4b10      	ldr	r3, [pc, #64]	; (80a2138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a20f6:	681a      	ldr	r2, [r3, #0]
 80a20f8:	07d1      	lsls	r1, r2, #31
 80a20fa:	bf5c      	itt	pl
 80a20fc:	2201      	movpl	r2, #1
 80a20fe:	601a      	strpl	r2, [r3, #0]
 80a2100:	4b0e      	ldr	r3, [pc, #56]	; (80a213c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2102:	681a      	ldr	r2, [r3, #0]
 80a2104:	07d2      	lsls	r2, r2, #31
 80a2106:	bf5c      	itt	pl
 80a2108:	2201      	movpl	r2, #1
 80a210a:	601a      	strpl	r2, [r3, #0]
 80a210c:	4770      	bx	lr
 80a210e:	bf00      	nop
 80a2110:	2000069c 	.word	0x2000069c
 80a2114:	20000698 	.word	0x20000698
 80a2118:	20000694 	.word	0x20000694
 80a211c:	20000690 	.word	0x20000690
 80a2120:	2000068c 	.word	0x2000068c
 80a2124:	20000688 	.word	0x20000688
 80a2128:	20000684 	.word	0x20000684
 80a212c:	20000680 	.word	0x20000680
 80a2130:	2000067c 	.word	0x2000067c
 80a2134:	20000678 	.word	0x20000678
 80a2138:	20000674 	.word	0x20000674
 80a213c:	20000670 	.word	0x20000670

080a2140 <__aeabi_drsub>:
 80a2140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2144:	e002      	b.n	80a214c <__adddf3>
 80a2146:	bf00      	nop

080a2148 <__aeabi_dsub>:
 80a2148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a214c <__adddf3>:
 80a214c:	b530      	push	{r4, r5, lr}
 80a214e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2156:	ea94 0f05 	teq	r4, r5
 80a215a:	bf08      	it	eq
 80a215c:	ea90 0f02 	teqeq	r0, r2
 80a2160:	bf1f      	itttt	ne
 80a2162:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2166:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a216a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a216e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2172:	f000 80e2 	beq.w	80a233a <__adddf3+0x1ee>
 80a2176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a217a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a217e:	bfb8      	it	lt
 80a2180:	426d      	neglt	r5, r5
 80a2182:	dd0c      	ble.n	80a219e <__adddf3+0x52>
 80a2184:	442c      	add	r4, r5
 80a2186:	ea80 0202 	eor.w	r2, r0, r2
 80a218a:	ea81 0303 	eor.w	r3, r1, r3
 80a218e:	ea82 0000 	eor.w	r0, r2, r0
 80a2192:	ea83 0101 	eor.w	r1, r3, r1
 80a2196:	ea80 0202 	eor.w	r2, r0, r2
 80a219a:	ea81 0303 	eor.w	r3, r1, r3
 80a219e:	2d36      	cmp	r5, #54	; 0x36
 80a21a0:	bf88      	it	hi
 80a21a2:	bd30      	pophi	{r4, r5, pc}
 80a21a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a21a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a21ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a21b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a21b4:	d002      	beq.n	80a21bc <__adddf3+0x70>
 80a21b6:	4240      	negs	r0, r0
 80a21b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a21bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a21c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a21c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a21c8:	d002      	beq.n	80a21d0 <__adddf3+0x84>
 80a21ca:	4252      	negs	r2, r2
 80a21cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a21d0:	ea94 0f05 	teq	r4, r5
 80a21d4:	f000 80a7 	beq.w	80a2326 <__adddf3+0x1da>
 80a21d8:	f1a4 0401 	sub.w	r4, r4, #1
 80a21dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a21e0:	db0d      	blt.n	80a21fe <__adddf3+0xb2>
 80a21e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a21e6:	fa22 f205 	lsr.w	r2, r2, r5
 80a21ea:	1880      	adds	r0, r0, r2
 80a21ec:	f141 0100 	adc.w	r1, r1, #0
 80a21f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a21f4:	1880      	adds	r0, r0, r2
 80a21f6:	fa43 f305 	asr.w	r3, r3, r5
 80a21fa:	4159      	adcs	r1, r3
 80a21fc:	e00e      	b.n	80a221c <__adddf3+0xd0>
 80a21fe:	f1a5 0520 	sub.w	r5, r5, #32
 80a2202:	f10e 0e20 	add.w	lr, lr, #32
 80a2206:	2a01      	cmp	r2, #1
 80a2208:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a220c:	bf28      	it	cs
 80a220e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2212:	fa43 f305 	asr.w	r3, r3, r5
 80a2216:	18c0      	adds	r0, r0, r3
 80a2218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a221c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2220:	d507      	bpl.n	80a2232 <__adddf3+0xe6>
 80a2222:	f04f 0e00 	mov.w	lr, #0
 80a2226:	f1dc 0c00 	rsbs	ip, ip, #0
 80a222a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a222e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2236:	d31b      	bcc.n	80a2270 <__adddf3+0x124>
 80a2238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a223c:	d30c      	bcc.n	80a2258 <__adddf3+0x10c>
 80a223e:	0849      	lsrs	r1, r1, #1
 80a2240:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2248:	f104 0401 	add.w	r4, r4, #1
 80a224c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2254:	f080 809a 	bcs.w	80a238c <__adddf3+0x240>
 80a2258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a225c:	bf08      	it	eq
 80a225e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2262:	f150 0000 	adcs.w	r0, r0, #0
 80a2266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a226a:	ea41 0105 	orr.w	r1, r1, r5
 80a226e:	bd30      	pop	{r4, r5, pc}
 80a2270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2274:	4140      	adcs	r0, r0
 80a2276:	eb41 0101 	adc.w	r1, r1, r1
 80a227a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a227e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2282:	d1e9      	bne.n	80a2258 <__adddf3+0x10c>
 80a2284:	f091 0f00 	teq	r1, #0
 80a2288:	bf04      	itt	eq
 80a228a:	4601      	moveq	r1, r0
 80a228c:	2000      	moveq	r0, #0
 80a228e:	fab1 f381 	clz	r3, r1
 80a2292:	bf08      	it	eq
 80a2294:	3320      	addeq	r3, #32
 80a2296:	f1a3 030b 	sub.w	r3, r3, #11
 80a229a:	f1b3 0220 	subs.w	r2, r3, #32
 80a229e:	da0c      	bge.n	80a22ba <__adddf3+0x16e>
 80a22a0:	320c      	adds	r2, #12
 80a22a2:	dd08      	ble.n	80a22b6 <__adddf3+0x16a>
 80a22a4:	f102 0c14 	add.w	ip, r2, #20
 80a22a8:	f1c2 020c 	rsb	r2, r2, #12
 80a22ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80a22b0:	fa21 f102 	lsr.w	r1, r1, r2
 80a22b4:	e00c      	b.n	80a22d0 <__adddf3+0x184>
 80a22b6:	f102 0214 	add.w	r2, r2, #20
 80a22ba:	bfd8      	it	le
 80a22bc:	f1c2 0c20 	rsble	ip, r2, #32
 80a22c0:	fa01 f102 	lsl.w	r1, r1, r2
 80a22c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a22c8:	bfdc      	itt	le
 80a22ca:	ea41 010c 	orrle.w	r1, r1, ip
 80a22ce:	4090      	lslle	r0, r2
 80a22d0:	1ae4      	subs	r4, r4, r3
 80a22d2:	bfa2      	ittt	ge
 80a22d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a22d8:	4329      	orrge	r1, r5
 80a22da:	bd30      	popge	{r4, r5, pc}
 80a22dc:	ea6f 0404 	mvn.w	r4, r4
 80a22e0:	3c1f      	subs	r4, #31
 80a22e2:	da1c      	bge.n	80a231e <__adddf3+0x1d2>
 80a22e4:	340c      	adds	r4, #12
 80a22e6:	dc0e      	bgt.n	80a2306 <__adddf3+0x1ba>
 80a22e8:	f104 0414 	add.w	r4, r4, #20
 80a22ec:	f1c4 0220 	rsb	r2, r4, #32
 80a22f0:	fa20 f004 	lsr.w	r0, r0, r4
 80a22f4:	fa01 f302 	lsl.w	r3, r1, r2
 80a22f8:	ea40 0003 	orr.w	r0, r0, r3
 80a22fc:	fa21 f304 	lsr.w	r3, r1, r4
 80a2300:	ea45 0103 	orr.w	r1, r5, r3
 80a2304:	bd30      	pop	{r4, r5, pc}
 80a2306:	f1c4 040c 	rsb	r4, r4, #12
 80a230a:	f1c4 0220 	rsb	r2, r4, #32
 80a230e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2312:	fa01 f304 	lsl.w	r3, r1, r4
 80a2316:	ea40 0003 	orr.w	r0, r0, r3
 80a231a:	4629      	mov	r1, r5
 80a231c:	bd30      	pop	{r4, r5, pc}
 80a231e:	fa21 f004 	lsr.w	r0, r1, r4
 80a2322:	4629      	mov	r1, r5
 80a2324:	bd30      	pop	{r4, r5, pc}
 80a2326:	f094 0f00 	teq	r4, #0
 80a232a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a232e:	bf06      	itte	eq
 80a2330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2334:	3401      	addeq	r4, #1
 80a2336:	3d01      	subne	r5, #1
 80a2338:	e74e      	b.n	80a21d8 <__adddf3+0x8c>
 80a233a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a233e:	bf18      	it	ne
 80a2340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2344:	d029      	beq.n	80a239a <__adddf3+0x24e>
 80a2346:	ea94 0f05 	teq	r4, r5
 80a234a:	bf08      	it	eq
 80a234c:	ea90 0f02 	teqeq	r0, r2
 80a2350:	d005      	beq.n	80a235e <__adddf3+0x212>
 80a2352:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2356:	bf04      	itt	eq
 80a2358:	4619      	moveq	r1, r3
 80a235a:	4610      	moveq	r0, r2
 80a235c:	bd30      	pop	{r4, r5, pc}
 80a235e:	ea91 0f03 	teq	r1, r3
 80a2362:	bf1e      	ittt	ne
 80a2364:	2100      	movne	r1, #0
 80a2366:	2000      	movne	r0, #0
 80a2368:	bd30      	popne	{r4, r5, pc}
 80a236a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a236e:	d105      	bne.n	80a237c <__adddf3+0x230>
 80a2370:	0040      	lsls	r0, r0, #1
 80a2372:	4149      	adcs	r1, r1
 80a2374:	bf28      	it	cs
 80a2376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a237a:	bd30      	pop	{r4, r5, pc}
 80a237c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2380:	bf3c      	itt	cc
 80a2382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2386:	bd30      	popcc	{r4, r5, pc}
 80a2388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a238c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2394:	f04f 0000 	mov.w	r0, #0
 80a2398:	bd30      	pop	{r4, r5, pc}
 80a239a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a239e:	bf1a      	itte	ne
 80a23a0:	4619      	movne	r1, r3
 80a23a2:	4610      	movne	r0, r2
 80a23a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a23a8:	bf1c      	itt	ne
 80a23aa:	460b      	movne	r3, r1
 80a23ac:	4602      	movne	r2, r0
 80a23ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a23b2:	bf06      	itte	eq
 80a23b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a23b8:	ea91 0f03 	teqeq	r1, r3
 80a23bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a23c0:	bd30      	pop	{r4, r5, pc}
 80a23c2:	bf00      	nop

080a23c4 <__aeabi_ui2d>:
 80a23c4:	f090 0f00 	teq	r0, #0
 80a23c8:	bf04      	itt	eq
 80a23ca:	2100      	moveq	r1, #0
 80a23cc:	4770      	bxeq	lr
 80a23ce:	b530      	push	{r4, r5, lr}
 80a23d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a23d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a23d8:	f04f 0500 	mov.w	r5, #0
 80a23dc:	f04f 0100 	mov.w	r1, #0
 80a23e0:	e750      	b.n	80a2284 <__adddf3+0x138>
 80a23e2:	bf00      	nop

080a23e4 <__aeabi_i2d>:
 80a23e4:	f090 0f00 	teq	r0, #0
 80a23e8:	bf04      	itt	eq
 80a23ea:	2100      	moveq	r1, #0
 80a23ec:	4770      	bxeq	lr
 80a23ee:	b530      	push	{r4, r5, lr}
 80a23f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a23f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a23f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a23fc:	bf48      	it	mi
 80a23fe:	4240      	negmi	r0, r0
 80a2400:	f04f 0100 	mov.w	r1, #0
 80a2404:	e73e      	b.n	80a2284 <__adddf3+0x138>
 80a2406:	bf00      	nop

080a2408 <__aeabi_f2d>:
 80a2408:	0042      	lsls	r2, r0, #1
 80a240a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a240e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2416:	bf1f      	itttt	ne
 80a2418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a241c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2424:	4770      	bxne	lr
 80a2426:	f092 0f00 	teq	r2, #0
 80a242a:	bf14      	ite	ne
 80a242c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2430:	4770      	bxeq	lr
 80a2432:	b530      	push	{r4, r5, lr}
 80a2434:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a243c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2440:	e720      	b.n	80a2284 <__adddf3+0x138>
 80a2442:	bf00      	nop

080a2444 <__aeabi_ul2d>:
 80a2444:	ea50 0201 	orrs.w	r2, r0, r1
 80a2448:	bf08      	it	eq
 80a244a:	4770      	bxeq	lr
 80a244c:	b530      	push	{r4, r5, lr}
 80a244e:	f04f 0500 	mov.w	r5, #0
 80a2452:	e00a      	b.n	80a246a <__aeabi_l2d+0x16>

080a2454 <__aeabi_l2d>:
 80a2454:	ea50 0201 	orrs.w	r2, r0, r1
 80a2458:	bf08      	it	eq
 80a245a:	4770      	bxeq	lr
 80a245c:	b530      	push	{r4, r5, lr}
 80a245e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2462:	d502      	bpl.n	80a246a <__aeabi_l2d+0x16>
 80a2464:	4240      	negs	r0, r0
 80a2466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a246a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a246e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2476:	f43f aedc 	beq.w	80a2232 <__adddf3+0xe6>
 80a247a:	f04f 0203 	mov.w	r2, #3
 80a247e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2482:	bf18      	it	ne
 80a2484:	3203      	addne	r2, #3
 80a2486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a248a:	bf18      	it	ne
 80a248c:	3203      	addne	r2, #3
 80a248e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2492:	f1c2 0320 	rsb	r3, r2, #32
 80a2496:	fa00 fc03 	lsl.w	ip, r0, r3
 80a249a:	fa20 f002 	lsr.w	r0, r0, r2
 80a249e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a24a2:	ea40 000e 	orr.w	r0, r0, lr
 80a24a6:	fa21 f102 	lsr.w	r1, r1, r2
 80a24aa:	4414      	add	r4, r2
 80a24ac:	e6c1      	b.n	80a2232 <__adddf3+0xe6>
 80a24ae:	bf00      	nop

080a24b0 <__aeabi_dmul>:
 80a24b0:	b570      	push	{r4, r5, r6, lr}
 80a24b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a24b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a24ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a24be:	bf1d      	ittte	ne
 80a24c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a24c4:	ea94 0f0c 	teqne	r4, ip
 80a24c8:	ea95 0f0c 	teqne	r5, ip
 80a24cc:	f000 f8de 	bleq	80a268c <__aeabi_dmul+0x1dc>
 80a24d0:	442c      	add	r4, r5
 80a24d2:	ea81 0603 	eor.w	r6, r1, r3
 80a24d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a24da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a24de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a24e2:	bf18      	it	ne
 80a24e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a24e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a24ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a24f0:	d038      	beq.n	80a2564 <__aeabi_dmul+0xb4>
 80a24f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a24f6:	f04f 0500 	mov.w	r5, #0
 80a24fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a24fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2502:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2506:	f04f 0600 	mov.w	r6, #0
 80a250a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a250e:	f09c 0f00 	teq	ip, #0
 80a2512:	bf18      	it	ne
 80a2514:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a251c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2524:	d204      	bcs.n	80a2530 <__aeabi_dmul+0x80>
 80a2526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a252a:	416d      	adcs	r5, r5
 80a252c:	eb46 0606 	adc.w	r6, r6, r6
 80a2530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a253c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2548:	bf88      	it	hi
 80a254a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a254e:	d81e      	bhi.n	80a258e <__aeabi_dmul+0xde>
 80a2550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2554:	bf08      	it	eq
 80a2556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a255a:	f150 0000 	adcs.w	r0, r0, #0
 80a255e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2562:	bd70      	pop	{r4, r5, r6, pc}
 80a2564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2568:	ea46 0101 	orr.w	r1, r6, r1
 80a256c:	ea40 0002 	orr.w	r0, r0, r2
 80a2570:	ea81 0103 	eor.w	r1, r1, r3
 80a2574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2578:	bfc2      	ittt	gt
 80a257a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a257e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2582:	bd70      	popgt	{r4, r5, r6, pc}
 80a2584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2588:	f04f 0e00 	mov.w	lr, #0
 80a258c:	3c01      	subs	r4, #1
 80a258e:	f300 80ab 	bgt.w	80a26e8 <__aeabi_dmul+0x238>
 80a2592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2596:	bfde      	ittt	le
 80a2598:	2000      	movle	r0, #0
 80a259a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a259e:	bd70      	pople	{r4, r5, r6, pc}
 80a25a0:	f1c4 0400 	rsb	r4, r4, #0
 80a25a4:	3c20      	subs	r4, #32
 80a25a6:	da35      	bge.n	80a2614 <__aeabi_dmul+0x164>
 80a25a8:	340c      	adds	r4, #12
 80a25aa:	dc1b      	bgt.n	80a25e4 <__aeabi_dmul+0x134>
 80a25ac:	f104 0414 	add.w	r4, r4, #20
 80a25b0:	f1c4 0520 	rsb	r5, r4, #32
 80a25b4:	fa00 f305 	lsl.w	r3, r0, r5
 80a25b8:	fa20 f004 	lsr.w	r0, r0, r4
 80a25bc:	fa01 f205 	lsl.w	r2, r1, r5
 80a25c0:	ea40 0002 	orr.w	r0, r0, r2
 80a25c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a25c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a25cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a25d0:	fa21 f604 	lsr.w	r6, r1, r4
 80a25d4:	eb42 0106 	adc.w	r1, r2, r6
 80a25d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a25dc:	bf08      	it	eq
 80a25de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a25e2:	bd70      	pop	{r4, r5, r6, pc}
 80a25e4:	f1c4 040c 	rsb	r4, r4, #12
 80a25e8:	f1c4 0520 	rsb	r5, r4, #32
 80a25ec:	fa00 f304 	lsl.w	r3, r0, r4
 80a25f0:	fa20 f005 	lsr.w	r0, r0, r5
 80a25f4:	fa01 f204 	lsl.w	r2, r1, r4
 80a25f8:	ea40 0002 	orr.w	r0, r0, r2
 80a25fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2604:	f141 0100 	adc.w	r1, r1, #0
 80a2608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a260c:	bf08      	it	eq
 80a260e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2612:	bd70      	pop	{r4, r5, r6, pc}
 80a2614:	f1c4 0520 	rsb	r5, r4, #32
 80a2618:	fa00 f205 	lsl.w	r2, r0, r5
 80a261c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2620:	fa20 f304 	lsr.w	r3, r0, r4
 80a2624:	fa01 f205 	lsl.w	r2, r1, r5
 80a2628:	ea43 0302 	orr.w	r3, r3, r2
 80a262c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2634:	fa21 f204 	lsr.w	r2, r1, r4
 80a2638:	ea20 0002 	bic.w	r0, r0, r2
 80a263c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2644:	bf08      	it	eq
 80a2646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a264a:	bd70      	pop	{r4, r5, r6, pc}
 80a264c:	f094 0f00 	teq	r4, #0
 80a2650:	d10f      	bne.n	80a2672 <__aeabi_dmul+0x1c2>
 80a2652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2656:	0040      	lsls	r0, r0, #1
 80a2658:	eb41 0101 	adc.w	r1, r1, r1
 80a265c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2660:	bf08      	it	eq
 80a2662:	3c01      	subeq	r4, #1
 80a2664:	d0f7      	beq.n	80a2656 <__aeabi_dmul+0x1a6>
 80a2666:	ea41 0106 	orr.w	r1, r1, r6
 80a266a:	f095 0f00 	teq	r5, #0
 80a266e:	bf18      	it	ne
 80a2670:	4770      	bxne	lr
 80a2672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2676:	0052      	lsls	r2, r2, #1
 80a2678:	eb43 0303 	adc.w	r3, r3, r3
 80a267c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2680:	bf08      	it	eq
 80a2682:	3d01      	subeq	r5, #1
 80a2684:	d0f7      	beq.n	80a2676 <__aeabi_dmul+0x1c6>
 80a2686:	ea43 0306 	orr.w	r3, r3, r6
 80a268a:	4770      	bx	lr
 80a268c:	ea94 0f0c 	teq	r4, ip
 80a2690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2694:	bf18      	it	ne
 80a2696:	ea95 0f0c 	teqne	r5, ip
 80a269a:	d00c      	beq.n	80a26b6 <__aeabi_dmul+0x206>
 80a269c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a26a0:	bf18      	it	ne
 80a26a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a26a6:	d1d1      	bne.n	80a264c <__aeabi_dmul+0x19c>
 80a26a8:	ea81 0103 	eor.w	r1, r1, r3
 80a26ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a26b0:	f04f 0000 	mov.w	r0, #0
 80a26b4:	bd70      	pop	{r4, r5, r6, pc}
 80a26b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a26ba:	bf06      	itte	eq
 80a26bc:	4610      	moveq	r0, r2
 80a26be:	4619      	moveq	r1, r3
 80a26c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a26c4:	d019      	beq.n	80a26fa <__aeabi_dmul+0x24a>
 80a26c6:	ea94 0f0c 	teq	r4, ip
 80a26ca:	d102      	bne.n	80a26d2 <__aeabi_dmul+0x222>
 80a26cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a26d0:	d113      	bne.n	80a26fa <__aeabi_dmul+0x24a>
 80a26d2:	ea95 0f0c 	teq	r5, ip
 80a26d6:	d105      	bne.n	80a26e4 <__aeabi_dmul+0x234>
 80a26d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a26dc:	bf1c      	itt	ne
 80a26de:	4610      	movne	r0, r2
 80a26e0:	4619      	movne	r1, r3
 80a26e2:	d10a      	bne.n	80a26fa <__aeabi_dmul+0x24a>
 80a26e4:	ea81 0103 	eor.w	r1, r1, r3
 80a26e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a26ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a26f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a26f4:	f04f 0000 	mov.w	r0, #0
 80a26f8:	bd70      	pop	{r4, r5, r6, pc}
 80a26fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a26fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2702:	bd70      	pop	{r4, r5, r6, pc}

080a2704 <__aeabi_ddiv>:
 80a2704:	b570      	push	{r4, r5, r6, lr}
 80a2706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a270a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a270e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2712:	bf1d      	ittte	ne
 80a2714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2718:	ea94 0f0c 	teqne	r4, ip
 80a271c:	ea95 0f0c 	teqne	r5, ip
 80a2720:	f000 f8a7 	bleq	80a2872 <__aeabi_ddiv+0x16e>
 80a2724:	eba4 0405 	sub.w	r4, r4, r5
 80a2728:	ea81 0e03 	eor.w	lr, r1, r3
 80a272c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2734:	f000 8088 	beq.w	80a2848 <__aeabi_ddiv+0x144>
 80a2738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a273c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a274c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a275c:	429d      	cmp	r5, r3
 80a275e:	bf08      	it	eq
 80a2760:	4296      	cmpeq	r6, r2
 80a2762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a276a:	d202      	bcs.n	80a2772 <__aeabi_ddiv+0x6e>
 80a276c:	085b      	lsrs	r3, r3, #1
 80a276e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2772:	1ab6      	subs	r6, r6, r2
 80a2774:	eb65 0503 	sbc.w	r5, r5, r3
 80a2778:	085b      	lsrs	r3, r3, #1
 80a277a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a277e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2786:	ebb6 0e02 	subs.w	lr, r6, r2
 80a278a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a278e:	bf22      	ittt	cs
 80a2790:	1ab6      	subcs	r6, r6, r2
 80a2792:	4675      	movcs	r5, lr
 80a2794:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2798:	085b      	lsrs	r3, r3, #1
 80a279a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a279e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a27a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a27a6:	bf22      	ittt	cs
 80a27a8:	1ab6      	subcs	r6, r6, r2
 80a27aa:	4675      	movcs	r5, lr
 80a27ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a27b0:	085b      	lsrs	r3, r3, #1
 80a27b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a27b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a27ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a27be:	bf22      	ittt	cs
 80a27c0:	1ab6      	subcs	r6, r6, r2
 80a27c2:	4675      	movcs	r5, lr
 80a27c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a27c8:	085b      	lsrs	r3, r3, #1
 80a27ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a27ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a27d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a27d6:	bf22      	ittt	cs
 80a27d8:	1ab6      	subcs	r6, r6, r2
 80a27da:	4675      	movcs	r5, lr
 80a27dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a27e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a27e4:	d018      	beq.n	80a2818 <__aeabi_ddiv+0x114>
 80a27e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a27ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a27ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a27f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a27f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a27fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a27fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2802:	d1c0      	bne.n	80a2786 <__aeabi_ddiv+0x82>
 80a2804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2808:	d10b      	bne.n	80a2822 <__aeabi_ddiv+0x11e>
 80a280a:	ea41 0100 	orr.w	r1, r1, r0
 80a280e:	f04f 0000 	mov.w	r0, #0
 80a2812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2816:	e7b6      	b.n	80a2786 <__aeabi_ddiv+0x82>
 80a2818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a281c:	bf04      	itt	eq
 80a281e:	4301      	orreq	r1, r0
 80a2820:	2000      	moveq	r0, #0
 80a2822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2826:	bf88      	it	hi
 80a2828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a282c:	f63f aeaf 	bhi.w	80a258e <__aeabi_dmul+0xde>
 80a2830:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2834:	bf04      	itt	eq
 80a2836:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a283a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a283e:	f150 0000 	adcs.w	r0, r0, #0
 80a2842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2846:	bd70      	pop	{r4, r5, r6, pc}
 80a2848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a284c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2854:	bfc2      	ittt	gt
 80a2856:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a285a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a285e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2864:	f04f 0e00 	mov.w	lr, #0
 80a2868:	3c01      	subs	r4, #1
 80a286a:	e690      	b.n	80a258e <__aeabi_dmul+0xde>
 80a286c:	ea45 0e06 	orr.w	lr, r5, r6
 80a2870:	e68d      	b.n	80a258e <__aeabi_dmul+0xde>
 80a2872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2876:	ea94 0f0c 	teq	r4, ip
 80a287a:	bf08      	it	eq
 80a287c:	ea95 0f0c 	teqeq	r5, ip
 80a2880:	f43f af3b 	beq.w	80a26fa <__aeabi_dmul+0x24a>
 80a2884:	ea94 0f0c 	teq	r4, ip
 80a2888:	d10a      	bne.n	80a28a0 <__aeabi_ddiv+0x19c>
 80a288a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a288e:	f47f af34 	bne.w	80a26fa <__aeabi_dmul+0x24a>
 80a2892:	ea95 0f0c 	teq	r5, ip
 80a2896:	f47f af25 	bne.w	80a26e4 <__aeabi_dmul+0x234>
 80a289a:	4610      	mov	r0, r2
 80a289c:	4619      	mov	r1, r3
 80a289e:	e72c      	b.n	80a26fa <__aeabi_dmul+0x24a>
 80a28a0:	ea95 0f0c 	teq	r5, ip
 80a28a4:	d106      	bne.n	80a28b4 <__aeabi_ddiv+0x1b0>
 80a28a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a28aa:	f43f aefd 	beq.w	80a26a8 <__aeabi_dmul+0x1f8>
 80a28ae:	4610      	mov	r0, r2
 80a28b0:	4619      	mov	r1, r3
 80a28b2:	e722      	b.n	80a26fa <__aeabi_dmul+0x24a>
 80a28b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a28b8:	bf18      	it	ne
 80a28ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a28be:	f47f aec5 	bne.w	80a264c <__aeabi_dmul+0x19c>
 80a28c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a28c6:	f47f af0d 	bne.w	80a26e4 <__aeabi_dmul+0x234>
 80a28ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a28ce:	f47f aeeb 	bne.w	80a26a8 <__aeabi_dmul+0x1f8>
 80a28d2:	e712      	b.n	80a26fa <__aeabi_dmul+0x24a>

080a28d4 <__gedf2>:
 80a28d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a28d8:	e006      	b.n	80a28e8 <__cmpdf2+0x4>
 80a28da:	bf00      	nop

080a28dc <__ledf2>:
 80a28dc:	f04f 0c01 	mov.w	ip, #1
 80a28e0:	e002      	b.n	80a28e8 <__cmpdf2+0x4>
 80a28e2:	bf00      	nop

080a28e4 <__cmpdf2>:
 80a28e4:	f04f 0c01 	mov.w	ip, #1
 80a28e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a28ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a28f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a28f8:	bf18      	it	ne
 80a28fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a28fe:	d01b      	beq.n	80a2938 <__cmpdf2+0x54>
 80a2900:	b001      	add	sp, #4
 80a2902:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2906:	bf0c      	ite	eq
 80a2908:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a290c:	ea91 0f03 	teqne	r1, r3
 80a2910:	bf02      	ittt	eq
 80a2912:	ea90 0f02 	teqeq	r0, r2
 80a2916:	2000      	moveq	r0, #0
 80a2918:	4770      	bxeq	lr
 80a291a:	f110 0f00 	cmn.w	r0, #0
 80a291e:	ea91 0f03 	teq	r1, r3
 80a2922:	bf58      	it	pl
 80a2924:	4299      	cmppl	r1, r3
 80a2926:	bf08      	it	eq
 80a2928:	4290      	cmpeq	r0, r2
 80a292a:	bf2c      	ite	cs
 80a292c:	17d8      	asrcs	r0, r3, #31
 80a292e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2932:	f040 0001 	orr.w	r0, r0, #1
 80a2936:	4770      	bx	lr
 80a2938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a293c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2940:	d102      	bne.n	80a2948 <__cmpdf2+0x64>
 80a2942:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2946:	d107      	bne.n	80a2958 <__cmpdf2+0x74>
 80a2948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a294c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2950:	d1d6      	bne.n	80a2900 <__cmpdf2+0x1c>
 80a2952:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2956:	d0d3      	beq.n	80a2900 <__cmpdf2+0x1c>
 80a2958:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a295c:	4770      	bx	lr
 80a295e:	bf00      	nop

080a2960 <__aeabi_cdrcmple>:
 80a2960:	4684      	mov	ip, r0
 80a2962:	4610      	mov	r0, r2
 80a2964:	4662      	mov	r2, ip
 80a2966:	468c      	mov	ip, r1
 80a2968:	4619      	mov	r1, r3
 80a296a:	4663      	mov	r3, ip
 80a296c:	e000      	b.n	80a2970 <__aeabi_cdcmpeq>
 80a296e:	bf00      	nop

080a2970 <__aeabi_cdcmpeq>:
 80a2970:	b501      	push	{r0, lr}
 80a2972:	f7ff ffb7 	bl	80a28e4 <__cmpdf2>
 80a2976:	2800      	cmp	r0, #0
 80a2978:	bf48      	it	mi
 80a297a:	f110 0f00 	cmnmi.w	r0, #0
 80a297e:	bd01      	pop	{r0, pc}

080a2980 <__aeabi_dcmpeq>:
 80a2980:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2984:	f7ff fff4 	bl	80a2970 <__aeabi_cdcmpeq>
 80a2988:	bf0c      	ite	eq
 80a298a:	2001      	moveq	r0, #1
 80a298c:	2000      	movne	r0, #0
 80a298e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2992:	bf00      	nop

080a2994 <__aeabi_dcmplt>:
 80a2994:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2998:	f7ff ffea 	bl	80a2970 <__aeabi_cdcmpeq>
 80a299c:	bf34      	ite	cc
 80a299e:	2001      	movcc	r0, #1
 80a29a0:	2000      	movcs	r0, #0
 80a29a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29a6:	bf00      	nop

080a29a8 <__aeabi_dcmple>:
 80a29a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a29ac:	f7ff ffe0 	bl	80a2970 <__aeabi_cdcmpeq>
 80a29b0:	bf94      	ite	ls
 80a29b2:	2001      	movls	r0, #1
 80a29b4:	2000      	movhi	r0, #0
 80a29b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29ba:	bf00      	nop

080a29bc <__aeabi_dcmpge>:
 80a29bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a29c0:	f7ff ffce 	bl	80a2960 <__aeabi_cdrcmple>
 80a29c4:	bf94      	ite	ls
 80a29c6:	2001      	movls	r0, #1
 80a29c8:	2000      	movhi	r0, #0
 80a29ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29ce:	bf00      	nop

080a29d0 <__aeabi_dcmpgt>:
 80a29d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a29d4:	f7ff ffc4 	bl	80a2960 <__aeabi_cdrcmple>
 80a29d8:	bf34      	ite	cc
 80a29da:	2001      	movcc	r0, #1
 80a29dc:	2000      	movcs	r0, #0
 80a29de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a29e2:	bf00      	nop

080a29e4 <__aeabi_dcmpun>:
 80a29e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a29e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a29ec:	d102      	bne.n	80a29f4 <__aeabi_dcmpun+0x10>
 80a29ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a29f2:	d10a      	bne.n	80a2a0a <__aeabi_dcmpun+0x26>
 80a29f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a29f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a29fc:	d102      	bne.n	80a2a04 <__aeabi_dcmpun+0x20>
 80a29fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2a02:	d102      	bne.n	80a2a0a <__aeabi_dcmpun+0x26>
 80a2a04:	f04f 0000 	mov.w	r0, #0
 80a2a08:	4770      	bx	lr
 80a2a0a:	f04f 0001 	mov.w	r0, #1
 80a2a0e:	4770      	bx	lr

080a2a10 <__aeabi_d2iz>:
 80a2a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2a18:	d215      	bcs.n	80a2a46 <__aeabi_d2iz+0x36>
 80a2a1a:	d511      	bpl.n	80a2a40 <__aeabi_d2iz+0x30>
 80a2a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2a24:	d912      	bls.n	80a2a4c <__aeabi_d2iz+0x3c>
 80a2a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2a36:	fa23 f002 	lsr.w	r0, r3, r2
 80a2a3a:	bf18      	it	ne
 80a2a3c:	4240      	negne	r0, r0
 80a2a3e:	4770      	bx	lr
 80a2a40:	f04f 0000 	mov.w	r0, #0
 80a2a44:	4770      	bx	lr
 80a2a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2a4a:	d105      	bne.n	80a2a58 <__aeabi_d2iz+0x48>
 80a2a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2a50:	bf08      	it	eq
 80a2a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2a56:	4770      	bx	lr
 80a2a58:	f04f 0000 	mov.w	r0, #0
 80a2a5c:	4770      	bx	lr
 80a2a5e:	bf00      	nop

080a2a60 <__aeabi_d2uiz>:
 80a2a60:	004a      	lsls	r2, r1, #1
 80a2a62:	d211      	bcs.n	80a2a88 <__aeabi_d2uiz+0x28>
 80a2a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2a68:	d211      	bcs.n	80a2a8e <__aeabi_d2uiz+0x2e>
 80a2a6a:	d50d      	bpl.n	80a2a88 <__aeabi_d2uiz+0x28>
 80a2a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2a74:	d40e      	bmi.n	80a2a94 <__aeabi_d2uiz+0x34>
 80a2a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2a82:	fa23 f002 	lsr.w	r0, r3, r2
 80a2a86:	4770      	bx	lr
 80a2a88:	f04f 0000 	mov.w	r0, #0
 80a2a8c:	4770      	bx	lr
 80a2a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2a92:	d102      	bne.n	80a2a9a <__aeabi_d2uiz+0x3a>
 80a2a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2a98:	4770      	bx	lr
 80a2a9a:	f04f 0000 	mov.w	r0, #0
 80a2a9e:	4770      	bx	lr

080a2aa0 <__aeabi_d2f>:
 80a2aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2aa8:	bf24      	itt	cs
 80a2aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a2ab2:	d90d      	bls.n	80a2ad0 <__aeabi_d2f+0x30>
 80a2ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2ac8:	bf08      	it	eq
 80a2aca:	f020 0001 	biceq.w	r0, r0, #1
 80a2ace:	4770      	bx	lr
 80a2ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2ad4:	d121      	bne.n	80a2b1a <__aeabi_d2f+0x7a>
 80a2ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2ada:	bfbc      	itt	lt
 80a2adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2ae0:	4770      	bxlt	lr
 80a2ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2aea:	f1c2 0218 	rsb	r2, r2, #24
 80a2aee:	f1c2 0c20 	rsb	ip, r2, #32
 80a2af2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2af6:	fa20 f002 	lsr.w	r0, r0, r2
 80a2afa:	bf18      	it	ne
 80a2afc:	f040 0001 	orrne.w	r0, r0, #1
 80a2b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2b0c:	ea40 000c 	orr.w	r0, r0, ip
 80a2b10:	fa23 f302 	lsr.w	r3, r3, r2
 80a2b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2b18:	e7cc      	b.n	80a2ab4 <__aeabi_d2f+0x14>
 80a2b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2b1e:	d107      	bne.n	80a2b30 <__aeabi_d2f+0x90>
 80a2b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2b24:	bf1e      	ittt	ne
 80a2b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2b2e:	4770      	bxne	lr
 80a2b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b3c:	4770      	bx	lr
 80a2b3e:	bf00      	nop

080a2b40 <__gesf2>:
 80a2b40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2b44:	e006      	b.n	80a2b54 <__cmpsf2+0x4>
 80a2b46:	bf00      	nop

080a2b48 <__lesf2>:
 80a2b48:	f04f 0c01 	mov.w	ip, #1
 80a2b4c:	e002      	b.n	80a2b54 <__cmpsf2+0x4>
 80a2b4e:	bf00      	nop

080a2b50 <__cmpsf2>:
 80a2b50:	f04f 0c01 	mov.w	ip, #1
 80a2b54:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2b58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2b64:	bf18      	it	ne
 80a2b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2b6a:	d011      	beq.n	80a2b90 <__cmpsf2+0x40>
 80a2b6c:	b001      	add	sp, #4
 80a2b6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2b72:	bf18      	it	ne
 80a2b74:	ea90 0f01 	teqne	r0, r1
 80a2b78:	bf58      	it	pl
 80a2b7a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2b7e:	bf88      	it	hi
 80a2b80:	17c8      	asrhi	r0, r1, #31
 80a2b82:	bf38      	it	cc
 80a2b84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2b88:	bf18      	it	ne
 80a2b8a:	f040 0001 	orrne.w	r0, r0, #1
 80a2b8e:	4770      	bx	lr
 80a2b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2b94:	d102      	bne.n	80a2b9c <__cmpsf2+0x4c>
 80a2b96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2b9a:	d105      	bne.n	80a2ba8 <__cmpsf2+0x58>
 80a2b9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2ba0:	d1e4      	bne.n	80a2b6c <__cmpsf2+0x1c>
 80a2ba2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2ba6:	d0e1      	beq.n	80a2b6c <__cmpsf2+0x1c>
 80a2ba8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2bac:	4770      	bx	lr
 80a2bae:	bf00      	nop

080a2bb0 <__aeabi_cfrcmple>:
 80a2bb0:	4684      	mov	ip, r0
 80a2bb2:	4608      	mov	r0, r1
 80a2bb4:	4661      	mov	r1, ip
 80a2bb6:	e7ff      	b.n	80a2bb8 <__aeabi_cfcmpeq>

080a2bb8 <__aeabi_cfcmpeq>:
 80a2bb8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2bba:	f7ff ffc9 	bl	80a2b50 <__cmpsf2>
 80a2bbe:	2800      	cmp	r0, #0
 80a2bc0:	bf48      	it	mi
 80a2bc2:	f110 0f00 	cmnmi.w	r0, #0
 80a2bc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2bc8 <__aeabi_fcmpeq>:
 80a2bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2bcc:	f7ff fff4 	bl	80a2bb8 <__aeabi_cfcmpeq>
 80a2bd0:	bf0c      	ite	eq
 80a2bd2:	2001      	moveq	r0, #1
 80a2bd4:	2000      	movne	r0, #0
 80a2bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2bda:	bf00      	nop

080a2bdc <__aeabi_fcmplt>:
 80a2bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2be0:	f7ff ffea 	bl	80a2bb8 <__aeabi_cfcmpeq>
 80a2be4:	bf34      	ite	cc
 80a2be6:	2001      	movcc	r0, #1
 80a2be8:	2000      	movcs	r0, #0
 80a2bea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2bee:	bf00      	nop

080a2bf0 <__aeabi_fcmple>:
 80a2bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2bf4:	f7ff ffe0 	bl	80a2bb8 <__aeabi_cfcmpeq>
 80a2bf8:	bf94      	ite	ls
 80a2bfa:	2001      	movls	r0, #1
 80a2bfc:	2000      	movhi	r0, #0
 80a2bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c02:	bf00      	nop

080a2c04 <__aeabi_fcmpge>:
 80a2c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c08:	f7ff ffd2 	bl	80a2bb0 <__aeabi_cfrcmple>
 80a2c0c:	bf94      	ite	ls
 80a2c0e:	2001      	movls	r0, #1
 80a2c10:	2000      	movhi	r0, #0
 80a2c12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c16:	bf00      	nop

080a2c18 <__aeabi_fcmpgt>:
 80a2c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c1c:	f7ff ffc8 	bl	80a2bb0 <__aeabi_cfrcmple>
 80a2c20:	bf34      	ite	cc
 80a2c22:	2001      	movcc	r0, #1
 80a2c24:	2000      	movcs	r0, #0
 80a2c26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c2a:	bf00      	nop

080a2c2c <__aeabi_f2uiz>:
 80a2c2c:	0042      	lsls	r2, r0, #1
 80a2c2e:	d20e      	bcs.n	80a2c4e <__aeabi_f2uiz+0x22>
 80a2c30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2c34:	d30b      	bcc.n	80a2c4e <__aeabi_f2uiz+0x22>
 80a2c36:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2c3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2c3e:	d409      	bmi.n	80a2c54 <__aeabi_f2uiz+0x28>
 80a2c40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2c48:	fa23 f002 	lsr.w	r0, r3, r2
 80a2c4c:	4770      	bx	lr
 80a2c4e:	f04f 0000 	mov.w	r0, #0
 80a2c52:	4770      	bx	lr
 80a2c54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2c58:	d101      	bne.n	80a2c5e <__aeabi_f2uiz+0x32>
 80a2c5a:	0242      	lsls	r2, r0, #9
 80a2c5c:	d102      	bne.n	80a2c64 <__aeabi_f2uiz+0x38>
 80a2c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2c62:	4770      	bx	lr
 80a2c64:	f04f 0000 	mov.w	r0, #0
 80a2c68:	4770      	bx	lr
 80a2c6a:	bf00      	nop

080a2c6c <__cxa_atexit>:
 80a2c6c:	b510      	push	{r4, lr}
 80a2c6e:	4c05      	ldr	r4, [pc, #20]	; (80a2c84 <__cxa_atexit+0x18>)
 80a2c70:	4613      	mov	r3, r2
 80a2c72:	b12c      	cbz	r4, 80a2c80 <__cxa_atexit+0x14>
 80a2c74:	460a      	mov	r2, r1
 80a2c76:	4601      	mov	r1, r0
 80a2c78:	2002      	movs	r0, #2
 80a2c7a:	f3af 8000 	nop.w
 80a2c7e:	bd10      	pop	{r4, pc}
 80a2c80:	4620      	mov	r0, r4
 80a2c82:	bd10      	pop	{r4, pc}
 80a2c84:	00000000 	.word	0x00000000

080a2c88 <memcpy>:
 80a2c88:	b510      	push	{r4, lr}
 80a2c8a:	1e43      	subs	r3, r0, #1
 80a2c8c:	440a      	add	r2, r1
 80a2c8e:	4291      	cmp	r1, r2
 80a2c90:	d004      	beq.n	80a2c9c <memcpy+0x14>
 80a2c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2c9a:	e7f8      	b.n	80a2c8e <memcpy+0x6>
 80a2c9c:	bd10      	pop	{r4, pc}

080a2c9e <memset>:
 80a2c9e:	4603      	mov	r3, r0
 80a2ca0:	4402      	add	r2, r0
 80a2ca2:	4293      	cmp	r3, r2
 80a2ca4:	d002      	beq.n	80a2cac <memset+0xe>
 80a2ca6:	f803 1b01 	strb.w	r1, [r3], #1
 80a2caa:	e7fa      	b.n	80a2ca2 <memset+0x4>
 80a2cac:	4770      	bx	lr
	...

080a2cb0 <srand>:
 80a2cb0:	b538      	push	{r3, r4, r5, lr}
 80a2cb2:	4b12      	ldr	r3, [pc, #72]	; (80a2cfc <srand+0x4c>)
 80a2cb4:	4605      	mov	r5, r0
 80a2cb6:	681c      	ldr	r4, [r3, #0]
 80a2cb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2cba:	b9d3      	cbnz	r3, 80a2cf2 <srand+0x42>
 80a2cbc:	2018      	movs	r0, #24
 80a2cbe:	f7fd ffbf 	bl	80a0c40 <malloc>
 80a2cc2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2cc6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2cc8:	8003      	strh	r3, [r0, #0]
 80a2cca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2cce:	8043      	strh	r3, [r0, #2]
 80a2cd0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2cd4:	8083      	strh	r3, [r0, #4]
 80a2cd6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2cda:	80c3      	strh	r3, [r0, #6]
 80a2cdc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2ce0:	8103      	strh	r3, [r0, #8]
 80a2ce2:	2305      	movs	r3, #5
 80a2ce4:	8143      	strh	r3, [r0, #10]
 80a2ce6:	230b      	movs	r3, #11
 80a2ce8:	8183      	strh	r3, [r0, #12]
 80a2cea:	2201      	movs	r2, #1
 80a2cec:	2300      	movs	r3, #0
 80a2cee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2cf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2cf4:	2200      	movs	r2, #0
 80a2cf6:	611d      	str	r5, [r3, #16]
 80a2cf8:	615a      	str	r2, [r3, #20]
 80a2cfa:	bd38      	pop	{r3, r4, r5, pc}
 80a2cfc:	20000068 	.word	0x20000068

080a2d00 <strdup>:
 80a2d00:	4b02      	ldr	r3, [pc, #8]	; (80a2d0c <strdup+0xc>)
 80a2d02:	4601      	mov	r1, r0
 80a2d04:	6818      	ldr	r0, [r3, #0]
 80a2d06:	f000 b803 	b.w	80a2d10 <_strdup_r>
 80a2d0a:	bf00      	nop
 80a2d0c:	20000068 	.word	0x20000068

080a2d10 <_strdup_r>:
 80a2d10:	b570      	push	{r4, r5, r6, lr}
 80a2d12:	4606      	mov	r6, r0
 80a2d14:	4608      	mov	r0, r1
 80a2d16:	460c      	mov	r4, r1
 80a2d18:	f000 f80d 	bl	80a2d36 <strlen>
 80a2d1c:	1c45      	adds	r5, r0, #1
 80a2d1e:	4629      	mov	r1, r5
 80a2d20:	4630      	mov	r0, r6
 80a2d22:	f7fd ffb5 	bl	80a0c90 <_malloc_r>
 80a2d26:	4606      	mov	r6, r0
 80a2d28:	b118      	cbz	r0, 80a2d32 <_strdup_r+0x22>
 80a2d2a:	462a      	mov	r2, r5
 80a2d2c:	4621      	mov	r1, r4
 80a2d2e:	f7ff ffab 	bl	80a2c88 <memcpy>
 80a2d32:	4630      	mov	r0, r6
 80a2d34:	bd70      	pop	{r4, r5, r6, pc}

080a2d36 <strlen>:
 80a2d36:	4603      	mov	r3, r0
 80a2d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2d3c:	2a00      	cmp	r2, #0
 80a2d3e:	d1fb      	bne.n	80a2d38 <strlen+0x2>
 80a2d40:	1a18      	subs	r0, r3, r0
 80a2d42:	3801      	subs	r0, #1
 80a2d44:	4770      	bx	lr

080a2d46 <link_code_end>:
	...

080a2d48 <dynalib_user>:
 80a2d48:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2d58:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
 80a2d68:	2e2e 002e 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a2d78:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a2d88:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a2d98:	6f70 6577 2e72 0020 6c50 6361 2065 6f79     power. .Place yo
 80a2da8:	7275 6920 646e 7865 6620 6e69 6567 2072     ur index finger 
 80a2db8:	6e6f 7420 6568 7320 6e65 6f73 2072 6977     on the sensor wi
 80a2dc8:	6874 7320 6574 6461 2079 7270 7365 7573     th steady pressu
 80a2dd8:	6572 002e 6425 7700 6275 6162 756c 6262     re..%d.wubbalubb
 80a2de8:	6461 6275 7564 0062 5249 003d 202c 5042     adubdub.IR=., BP
 80a2df8:	3d4d 2c00 4120 6776 4220 4d50 003d 4e20     M=., Avg BPM=. N
 80a2e08:	206f 6966 676e 7265 003f                    o finger?.

080a2e12 <_ZL9FIRCoeffs>:
 80a2e12:	00ac 0141 0243 039f 0550 0742 0956 0b64     ..A.C...P.B.V.d.
 80a2e22:	0d3f 0eb8 0fac 1000 0000                    ?.........

080a2e2c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2e34:	0ccf 080a 0cd5 080a 0d2b 080a 0ce3 080a     ........+.......
 80a2e44:	0cd1 080a                                   ....

080a2e48 <_ZTV7TwoWire>:
	...
 80a2e50:	12c1 080a 130b 080a 12e3 080a 12c3 080a     ................
 80a2e60:	12eb 080a 12f3 080a 12fb 080a 1303 080a     ................

080a2e70 <_ZTV9IPAddress>:
	...
 80a2e78:	139f 080a 138f 080a 1391 080a 6162 6475     ............baud
 80a2e88:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2e98:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2ea8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2eb8:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2ec8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2ed8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2ee8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2ef8:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2f08:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a2f18:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a2f28:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
 80a2f38:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 80a2f48:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a2f58:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a2f64 <_ZTVN5spark12NetworkClassE>:
	...
 80a2f6c:	1465 080a 146f 080a 1479 080a 1483 080a     e...o...y.......
 80a2f7c:	148d 080a 1499 080a 14a5 080a 14b1 080a     ................
 80a2f8c:	14b9 080a 14c3 080a 14cd 080a 616e 006e     ............nan.
 80a2f9c:	766f 0066 6e69 0066                         ovf.inf.

080a2fa4 <_ZTV8SPIClass>:
	...
 80a2fac:	17e9 080a 17eb 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2fbc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2fcc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2fdc:	0000 0000                                   ....

080a2fe0 <_ZTV11USARTSerial>:
	...
 80a2fe8:	1951 080a 19a1 080a 19af 080a 1531 080a     Q...........1...
 80a2ff8:	1965 080a 1987 080a 1973 080a 199b 080a     e.......s.......
 80a3008:	1953 080a 1957 080a                         S...W...

080a3010 <_ZTV9USBSerial>:
	...
 80a3018:	1a51 080a 1aa1 080a 1aaf 080a 1531 080a     Q...........1...
 80a3028:	1a8d 080a 1a53 080a 1a69 080a 1a9b 080a     ....S...i.......
 80a3038:	1a7f 080a 1a4d 080a                         ....M...

080a3040 <_ZTVN5spark9WiFiClassE>:
	...
 80a3048:	1c93 080a 1c89 080a 1c7f 080a 1bf1 080a     ................
 80a3058:	1c73 080a 1c67 080a 1c5b 080a 1c53 080a     s...g...[...S...
 80a3068:	1c49 080a 1c3f 080a 1bfb 080a               I...?.......

080a3074 <__sf_fake_stdin>:
	...

080a3094 <__sf_fake_stdout>:
	...

080a30b4 <__sf_fake_stderr>:
	...
 80a30d4:	0043                                        C.

080a30d6 <link_const_variable_data_end>:
	...

080a30d8 <link_constructors_location>:
 80a30d8:	080a02d9 	.word	0x080a02d9
 80a30dc:	080a07bf 	.word	0x080a07bf
 80a30e0:	080a090d 	.word	0x080a090d
 80a30e4:	080a0911 	.word	0x080a0911
 80a30e8:	080a1455 	.word	0x080a1455
 80a30ec:	080a151d 	.word	0x080a151d
 80a30f0:	080a17cd 	.word	0x080a17cd
 80a30f4:	080a1925 	.word	0x080a1925
 80a30f8:	080a193d 	.word	0x080a193d
 80a30fc:	080a1c9d 	.word	0x080a1c9d
 80a3100:	080a1e29 	.word	0x080a1e29
 80a3104:	080a1e59 	.word	0x080a1e59
 80a3108:	080a1eb1 	.word	0x080a1eb1
 80a310c:	080a1f75 	.word	0x080a1f75
 80a3110:	080a1ff9 	.word	0x080a1ff9
 80a3114:	080a207d 	.word	0x080a207d

080a3118 <link_constructors_end>:
	...
